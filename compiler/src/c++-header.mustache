{{!
| Copyright (c) 2013, Kenton Varda <temporal@gmail.com>
| All rights reserved.
|
| Redistribution and use in source and binary forms, with or without
| modification, are permitted provided that the following conditions are met:
|
| 1. Redistributions of source code must retain the above copyright notice, this
|    list of conditions and the following disclaimer.
| 2. Redistributions in binary form must reproduce the above copyright notice,
|    this list of conditions and the following disclaimer in the documentation
|    and/or other materials provided with the distribution.
|
| THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
| ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
| WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
| DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
| ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
| (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
| LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
| ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
| SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Template for generated C++ header files.
}}// Generated code, DO NOT EDIT

#include <capnproto/generated-header-support.h>

#ifndef {{fileIncludeGuard}}
#define {{fileIncludeGuard}}
{{#fileNamespaces}}
namespace {{namespaceName}} {
{{/fileNamespaces}}
{{! =========================================================================================== }}
{{#fileStructs}}

struct {{structName}} {
  class Reader;
  class Builder;
{{#structChildren}}
  struct {{structChildName}};
{{/structChildren}}

  static constexpr ::capnproto::internal::StructSize STRUCT_SIZE =
      ::capnproto::internal::StructSize({{structDataSize}} * ::capnproto::WORDS,
                                        {{structReferenceCount}} * ::capnproto::REFERENCES);
{{#structFields}}
{{#fieldDefaultBytes}}
  static const ::capnproto::internal::AlignedData<{{defaultWordCount}}> DEFAULT_{{fieldUpperCase}};
{{/fieldDefaultBytes}}
{{/structFields}}
{{#structUnions}}

  // {{unionDecl}}
  enum class {{unionTitleCase}}: uint16_t {
{{#unionFields}}
    {{fieldUpperCase}} = {{fieldUnionDiscriminant}},
{{/unionFields}}
  };
{{/structUnions}}
};
{{/fileStructs}}
{{! ------------------------------------------------------------------------------------------- }}
{{#fileEnums}}

enum class {{enumName}}: uint16_t {
{{#enumValues}}
  {{enumValueName}} = {{enumValueNumber}},
{{/enumValues}}
};
{{/fileEnums}}
{{! =========================================================================================== }}
{{#fileStructs}}

class {{structName}}::Reader {
public:
  Reader() = default;
  inline explicit Reader(::capnproto::internal::StructReader base): _reader(base) {}
{{#structUnions}}

  // {{unionDecl}}
  inline {{unionTitleCase}} which{{unionTitleCase}}();
{{/structUnions}}
{{#structFields}}

  // {{fieldDecl}}
{{#fieldIsPrimitive}}
  inline {{fieldType}} get{{fieldTitleCase}}();
{{/fieldIsPrimitive}}
{{#fieldIsBlob}}
  inline {{fieldType}}::Reader get{{fieldTitleCase}}();
{{/fieldIsBlob}}
{{#fieldIsStruct}}
  inline {{fieldType}}::Reader get{{fieldTitleCase}}();
{{/fieldIsStruct}}
{{#fieldIsList}}
  inline {{fieldType}}::Reader get{{fieldTitleCase}}();
{{/fieldIsList}}
{{/structFields}}
private:
  ::capnproto::internal::StructReader _reader;
};
{{/fileStructs}}
{{! ------------------------------------------------------------------------------------------- }}
{{#fileStructs}}

class {{structName}}::Builder {
public:
  Builder() = default;
  inline explicit Builder(::capnproto::internal::StructBuilder base): _builder(base) {}
  inline operator Reader() { return Reader(_builder.asReader()); }
  inline Reader asReader() { return *this; }
{{#structUnions}}

  // {{unionDecl}}
  inline {{unionTitleCase}} which{{unionTitleCase}}();
{{/structUnions}}
{{#structFields}}

  // {{fieldDecl}}
{{#fieldIsPrimitive}}
  inline {{fieldType}} get{{fieldTitleCase}}();
  inline void set{{fieldTitleCase}}({{fieldType}} value);
{{/fieldIsPrimitive}}
{{#fieldIsBlob}}
  inline {{fieldType}}::Builder get{{fieldTitleCase}}();
  inline void set{{fieldTitleCase}}({{fieldType}}::Reader value);
  inline {{fieldType}}::Builder init{{fieldTitleCase}}(unsigned int size);
{{/fieldIsBlob}}
{{#fieldIsStruct}}
  inline {{fieldType}}::Builder init{{fieldTitleCase}}();
  inline {{fieldType}}::Builder get{{fieldTitleCase}}();
{{/fieldIsStruct}}
{{#fieldIsNonStructList}}
  inline {{fieldType}}::Builder init{{fieldTitleCase}}(unsigned int size);
  inline {{fieldType}}::Builder get{{fieldTitleCase}}();
  template <typename _t>
  inline void set{{fieldTitleCase}}(const _t& other);
{{#fieldIsPrimitiveList}}
  inline void set{{fieldTitleCase}}(std::initializer_list<{{fieldElementType}}> other);
{{/fieldIsPrimitiveList}}
{{^fieldIsPrimitiveList}}
  inline void set{{fieldTitleCase}}(std::initializer_list<{{fieldElementType}}::Reader> other);
{{/fieldIsPrimitiveList}}
{{/fieldIsNonStructList}}
{{#fieldIsStructList}}
  inline {{fieldType}}::Builder init{{fieldTitleCase}}(unsigned int size);
  inline {{fieldType}}::Builder get{{fieldTitleCase}}();
{{/fieldIsStructList}}
{{/structFields}}
private:
  ::capnproto::internal::StructBuilder _builder;
};
{{/fileStructs}}
{{! =========================================================================================== }}
{{#fileStructs}}
{{#structUnions}}

// {{structName}}.{{unionDecl}}
inline {{structName}}::{{unionTitleCase}} {{structName}}::Reader::which{{unionTitleCase}}() {
  return _reader.getDataField<{{unionTitleCase}}>({{unionTagOffset}} * ::capnproto::ELEMENTS);
}
{{/structUnions}}
{{#structFields}}

// {{structName}}.{{fieldDecl}}
{{#fieldIsPrimitive}}
inline {{fieldType}} {{structName}}::Reader::get{{fieldTitleCase}}() {
{{#fieldUnion}}
  CAPNPROTO_INLINE_DPRECOND(which{{unionTitleCase}}() == {{unionTitleCase}}::{{fieldUpperCase}},
                            "Must check which() before get()ing a union member.");
{{/fieldUnion}}
  return _reader.getDataField<{{fieldType}}>(
      {{fieldOffset}} * ::capnproto::ELEMENTS{{fieldDefaultMask}});
}
{{/fieldIsPrimitive}}
{{#fieldIsBlob}}
inline {{fieldType}}::Reader {{structName}}::Reader::get{{fieldTitleCase}}() {
{{#fieldUnion}}
  CAPNPROTO_INLINE_DPRECOND(which{{unionTitleCase}}() == {{unionTitleCase}}::{{fieldUpperCase}},
                            "Must check which() before get()ing a union member.");
{{/fieldUnion}}
  return _reader.get{{fieldBlobType}}Field(
      {{fieldOffset}} * ::capnproto::REFERENCES,
{{#fieldDefaultBytes}}
      DEFAULT_{{fieldUpperCase}}.words, {{defaultBlobSize}} * ::capnproto::BYTES
{{/fieldDefaultBytes}}
      {{^fieldDefaultBytes}}nullptr, 0 * ::capnproto::BYTES{{/fieldDefaultBytes}});
}
{{/fieldIsBlob}}
{{#fieldIsStruct}}
inline {{fieldType}}::Reader {{structName}}::Reader::get{{fieldTitleCase}}() {
{{#fieldUnion}}
  CAPNPROTO_INLINE_DPRECOND(which{{unionTitleCase}}() == {{unionTitleCase}}::{{fieldUpperCase}},
                            "Must check which() before get()ing a union member.");
{{/fieldUnion}}
  return {{fieldType}}::Reader(_reader.getStructField(
      {{fieldOffset}} * ::capnproto::REFERENCES,
      {{#fieldDefaultBytes}}DEFAULT_{{fieldUpperCase}}.words{{/fieldDefaultBytes}}
      {{^fieldDefaultBytes}}nullptr{{/fieldDefaultBytes}}));
}
{{/fieldIsStruct}}
{{#fieldIsList}}
inline {{fieldType}}::Reader {{structName}}::Reader::get{{fieldTitleCase}}() {
{{#fieldUnion}}
  CAPNPROTO_INLINE_DPRECOND(which{{unionTitleCase}}() == {{unionTitleCase}}::{{fieldUpperCase}},
                            "Must check which() before get()ing a union member.");
{{/fieldUnion}}
  return {{fieldType}}::Reader(_reader.getListField(
      {{fieldOffset}} * ::capnproto::REFERENCES,
      ::capnproto::internal::FieldSize::{{fieldElementSize}},
      {{#fieldDefaultBytes}}DEFAULT_{{fieldUpperCase}}.words{{/fieldDefaultBytes}}
      {{^fieldDefaultBytes}}nullptr{{/fieldDefaultBytes}}));
}
{{/fieldIsList}}
{{/structFields}}
{{/fileStructs}}
{{! =========================================================================================== }}
{{#fileStructs}}
{{#structUnions}}

// {{structName}}.{{unionDecl}}
inline {{structName}}::{{unionTitleCase}} {{structName}}::Builder::which{{unionTitleCase}}() {
  return _builder.getDataField<{{unionTitleCase}}>({{unionTagOffset}} * ::capnproto::ELEMENTS);
}
{{/structUnions}}
{{#structFields}}

// {{structName}}.{{fieldDecl}}
{{#fieldIsPrimitive}}
inline {{fieldType}} {{structName}}::Builder::get{{fieldTitleCase}}() {
{{#fieldUnion}}
  CAPNPROTO_INLINE_DPRECOND(which{{unionTitleCase}}() == {{unionTitleCase}}::{{fieldUpperCase}},
                            "Must check which() before get()ing a union member.");
{{/fieldUnion}}
  return _builder.getDataField<{{fieldType}}>(
      {{fieldOffset}} * ::capnproto::ELEMENTS{{fieldDefaultMask}});
}
inline void {{structName}}::Builder::set{{fieldTitleCase}}({{fieldType}} value) {
{{#fieldUnion}}
  _builder.setDataField<{{unionTitleCase}}>(
      {{unionTagOffset}} * ::capnproto::ELEMENTS, {{unionTitleCase}}::{{fieldUpperCase}});
{{/fieldUnion}}
  return _builder.setDataField<{{fieldType}}>(
      {{fieldOffset}} * ::capnproto::ELEMENTS, value{{fieldDefaultMask}});
}
{{/fieldIsPrimitive}}
{{#fieldIsBlob}}
inline {{fieldType}}::Builder {{structName}}::Builder::get{{fieldTitleCase}}() {
{{#fieldUnion}}
  CAPNPROTO_INLINE_DPRECOND(which{{unionTitleCase}}() == {{unionTitleCase}}::{{fieldUpperCase}},
                            "Must check which() before get()ing a union member.");
{{/fieldUnion}}
  return _builder.get{{fieldBlobType}}Field({{fieldOffset}} * ::capnproto::REFERENCES,
{{#fieldDefaultBytes}}
      DEFAULT_{{fieldUpperCase}}.words, {{defaultBlobSize}} * ::capnproto::BYTES
{{/fieldDefaultBytes}}
      {{^fieldDefaultBytes}}nullptr, 0 * ::capnproto::BYTES{{/fieldDefaultBytes}});
}
inline void {{structName}}::Builder::set{{fieldTitleCase}}({{fieldType}}::Reader value) {
{{#fieldUnion}}
  _builder.setDataField<{{unionTitleCase}}>(
      {{unionTagOffset}} * ::capnproto::ELEMENTS, {{unionTitleCase}}::{{fieldUpperCase}});
{{/fieldUnion}}
  _builder.set{{fieldBlobType}}Field({{fieldOffset}} * ::capnproto::REFERENCES, value);
}
inline {{fieldType}}::Builder {{structName}}::Builder::init{{fieldTitleCase}}(unsigned int size) {
{{#fieldUnion}}
  _builder.setDataField<{{unionTitleCase}}>(
      {{unionTagOffset}} * ::capnproto::ELEMENTS, {{unionTitleCase}}::{{fieldUpperCase}});
{{/fieldUnion}}
  return _builder.init{{fieldBlobType}}Field(
      {{fieldOffset}} * ::capnproto::REFERENCES, size * ::capnproto::BYTES);
}
{{/fieldIsBlob}}
{{#fieldIsStruct}}
inline {{fieldType}}::Builder {{structName}}::Builder::init{{fieldTitleCase}}() {
{{#fieldUnion}}
  _builder.setDataField<{{unionTitleCase}}>(
      {{unionTagOffset}} * ::capnproto::ELEMENTS, {{unionTitleCase}}::{{fieldUpperCase}});
{{/fieldUnion}}
  return {{fieldType}}::Builder(_builder.initStructField(
      {{fieldOffset}} * ::capnproto::REFERENCES, {{fieldType}}::STRUCT_SIZE));
}
inline {{fieldType}}::Builder {{structName}}::Builder::get{{fieldTitleCase}}() {
{{#fieldUnion}}
  CAPNPROTO_INLINE_DPRECOND(which{{unionTitleCase}}() == {{unionTitleCase}}::{{fieldUpperCase}},
                            "Must check which() before get()ing a union member.");
{{/fieldUnion}}
  return {{fieldType}}::Builder(_builder.getStructField(
      {{fieldOffset}} * ::capnproto::REFERENCES, {{fieldType}}::STRUCT_SIZE,
      {{#fieldDefaultBytes}}DEFAULT_{{fieldUpperCase}}.words{{/fieldDefaultBytes}}
      {{^fieldDefaultBytes}}nullptr{{/fieldDefaultBytes}}));
}
{{/fieldIsStruct}}
{{#fieldIsNonStructList}}
inline {{fieldType}}::Builder {{structName}}::Builder::init{{fieldTitleCase}}(unsigned int size) {
{{#fieldUnion}}
  _builder.setDataField<{{unionTitleCase}}>(
      {{unionTagOffset}} * ::capnproto::ELEMENTS, {{unionTitleCase}}::{{fieldUpperCase}});
{{/fieldUnion}}
  return {{fieldType}}::Builder(_builder.initListField(
      {{fieldOffset}} * ::capnproto::REFERENCES,
      ::capnproto::internal::FieldSize::{{fieldElementSize}},
      size * ::capnproto::ELEMENTS));
}
inline {{fieldType}}::Builder {{structName}}::Builder::get{{fieldTitleCase}}() {
{{#fieldUnion}}
  CAPNPROTO_INLINE_DPRECOND(which{{unionTitleCase}}() == {{unionTitleCase}}::{{fieldUpperCase}},
                            "Must check which() before get()ing a union member.");
{{/fieldUnion}}
  return {{fieldType}}::Builder(_builder.getListField(
      {{fieldOffset}} * ::capnproto::REFERENCES,
      {{#fieldDefaultBytes}}DEFAULT_{{fieldUpperCase}}.words{{/fieldDefaultBytes}}
      {{^fieldDefaultBytes}}nullptr{{/fieldDefaultBytes}}));
}
template <typename _t>
inline void {{structName}}::Builder::set{{fieldTitleCase}}(const _t& other) {
{{#fieldUnion}}
  _builder.setDataField<{{unionTitleCase}}>(
      {{unionTagOffset}} * ::capnproto::ELEMENTS, {{unionTitleCase}}::{{fieldUpperCase}});
{{/fieldUnion}}
  init{{fieldTitleCase}}(other.size()).copyFrom(other);
}
{{#fieldIsPrimitiveList}}
inline void {{structName}}::Builder::set{{fieldTitleCase}}(
    std::initializer_list<{{fieldElementType}}> other) {
{{#fieldUnion}}
  _builder.setDataField<{{unionTitleCase}}>(
      {{unionTagOffset}} * ::capnproto::ELEMENTS, {{unionTitleCase}}::{{fieldUpperCase}});
{{/fieldUnion}}
  init{{fieldTitleCase}}(other.size()).copyFrom(other);
}
{{/fieldIsPrimitiveList}}
{{^fieldIsPrimitiveList}}
inline void {{structName}}::Builder::set{{fieldTitleCase}}(
    std::initializer_list<{{fieldElementType}}::Reader> other) {
{{#fieldUnion}}
  _builder.setDataField<{{unionTitleCase}}>(
      {{unionTagOffset}} * ::capnproto::ELEMENTS, {{unionTitleCase}}::{{fieldUpperCase}});
{{/fieldUnion}}
  init{{fieldTitleCase}}(other.size()).copyFrom(other);
}
{{/fieldIsPrimitiveList}}
{{/fieldIsNonStructList}}
{{#fieldIsStructList}}
inline {{fieldType}}::Builder {{structName}}::Builder::init{{fieldTitleCase}}(unsigned int size) {
{{#fieldUnion}}
  _builder.setDataField<{{unionTitleCase}}>(
      {{unionTagOffset}} * ::capnproto::ELEMENTS, {{unionTitleCase}}::{{fieldUpperCase}});
{{/fieldUnion}}
  return {{fieldType}}::Builder(_builder.initStructListField(
      {{fieldOffset}} * ::capnproto::REFERENCES, size * ::capnproto::ELEMENTS,
      {{fieldElementType}}::STRUCT_SIZE));
}
inline {{fieldType}}::Builder {{structName}}::Builder::get{{fieldTitleCase}}() {
{{#fieldUnion}}
  CAPNPROTO_INLINE_DPRECOND(which{{unionTitleCase}}() == {{unionTitleCase}}::{{fieldUpperCase}},
                            "Must check which() before get()ing a union member.");
{{/fieldUnion}}
  return {{fieldType}}::Builder(_builder.getListField(
      {{fieldOffset}} * ::capnproto::REFERENCES,
      {{#fieldDefaultBytes}}DEFAULT_{{fieldUpperCase}}.words{{/fieldDefaultBytes}}
      {{^fieldDefaultBytes}}nullptr{{/fieldDefaultBytes}}));
}
{{/fieldIsStructList}}
{{/structFields}}
{{/fileStructs}}
{{! =========================================================================================== }}

{{#fileNamespaces}}
}  // namespace
{{/fileNamespaces}}
#endif  // {{fileIncludeGuard}}
