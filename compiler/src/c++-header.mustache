{{!
| Copyright (c) 2013, Kenton Varda <temporal@gmail.com>
| All rights reserved.
|
| Redistribution and use in source and binary forms, with or without
| modification, are permitted provided that the following conditions are met:
|
| 1. Redistributions of source code must retain the above copyright notice, this
|    list of conditions and the following disclaimer.
| 2. Redistributions in binary form must reproduce the above copyright notice,
|    this list of conditions and the following disclaimer in the documentation
|    and/or other materials provided with the distribution.
|
| THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
| ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
| WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
| DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
| ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
| (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
| LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
| ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
| SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Template for generated C++ header files.
}}// Generated code, DO NOT EDIT

#ifndef {{fileIncludeGuard}}
#define {{fileIncludeGuard}}

#include <capnproto/generated-header-support.h>
{{#fileImports}}
{{#importIsSystem}}
#include <{{importFilename}}.h>
{{/importIsSystem}}
{{^importIsSystem}}
#include "{{importFilename}}.h"
{{/importIsSystem}}
{{/fileImports}}

{{#fileNamespaces}}
namespace {{namespaceName}} {
{{/fileNamespaces}}
{{! =========================================================================================== }}
{{#fileTypes}}
{{#typeStructOrUnion}}

struct {{typeFullName}} {
  class Reader;
  class Builder;
{{#typeStruct}}
{{#structNestedStructs}}
  struct {{nestedName}};
{{/structNestedStructs}}
{{#structUnions}}
  struct {{unionTitleCase}};
{{/structUnions}}
{{#structNestedInterfaces}}
  struct {{nestedName}};
{{/structNestedInterfaces}}
{{#structNestedEnums}}

  enum class {{enumName}}: uint16_t {
{{#enumerants}}
    {{enumerantName}} = {{enumerantNumber}},
{{/enumerants}}
  };
{{/structNestedEnums}}

  static constexpr ::capnproto::internal::StructSize STRUCT_SIZE =
      ::capnproto::internal::StructSize({{structDataSize}} * ::capnproto::WORDS,
                                        {{structReferenceCount}} * ::capnproto::REFERENCES,
                                        {{structDataBits}} * ::capnproto::BITS);

{{/typeStruct}}
{{#typeUnion}}

  enum Which: uint16_t {
{{#unionFields}}
    {{fieldUpperCase}} = {{fieldUnionDiscriminant}},
{{/unionFields}}
  };

{{/typeUnion}}
{{#typeFields}}
{{#fieldDefaultBytes}}
  static const ::capnproto::internal::AlignedData<{{defaultWordCount}}> DEFAULT_{{fieldUpperCase}};
{{/fieldDefaultBytes}}
{{/typeFields}}
};
{{/typeStructOrUnion}}
{{/fileTypes}}
{{! ------------------------------------------------------------------------------------------- }}
{{#fileEnums}}

enum class {{enumName}}: uint16_t {
{{#enumerants}}
  {{enumerantName}} = {{enumerantNumber}},
{{/enumerants}}
};
{{/fileEnums}}
{{! =========================================================================================== }}
{{#fileTypes}}
{{#typeStructOrUnion}}

class {{typeFullName}}::Reader {
public:
  Reader() = default;
  inline explicit Reader(::capnproto::internal::StructReader base): _reader(base) {}
{{#typeStruct}}
{{#structUnions}}

  // {{unionDecl}}
  inline {{unionTitleCase}}::Reader get{{unionTitleCase}}();
{{/structUnions}}
{{/typeStruct}}
{{#typeUnion}}

  inline Which which();
{{/typeUnion}}
{{#typeFields}}

  // {{fieldDecl}}
{{#fieldIsPrimitive}}
  inline {{fieldType}} get{{fieldTitleCase}}();
{{/fieldIsPrimitive}}
{{#fieldIsBlob}}
  inline {{fieldType}}::Reader get{{fieldTitleCase}}();
{{/fieldIsBlob}}
{{#fieldIsStruct}}
  inline {{fieldType}}::Reader get{{fieldTitleCase}}();
{{/fieldIsStruct}}
{{#fieldIsList}}
  inline {{fieldType}}::Reader get{{fieldTitleCase}}();
{{/fieldIsList}}
{{/typeFields}}
private:
  ::capnproto::internal::StructReader _reader;
};
{{! ------------------------------------------------------------------------------------------- }}

class {{typeFullName}}::Builder {
public:
  Builder() = default;
  inline explicit Builder(::capnproto::internal::StructBuilder base): _builder(base) {}
  inline operator Reader() { return Reader(_builder.asReader()); }
  inline Reader asReader() { return *this; }
{{#typeStruct}}
{{#structUnions}}

  // {{unionDecl}}
  inline {{unionTitleCase}}::Builder get{{unionTitleCase}}();
{{/structUnions}}
{{/typeStruct}}
{{#typeUnion}}

  inline Which which();
{{/typeUnion}}
{{#typeFields}}

  // {{fieldDecl}}
{{#fieldIsPrimitive}}
  inline {{fieldType}} get{{fieldTitleCase}}();
  inline void set{{fieldTitleCase}}({{fieldType}} value);
{{/fieldIsPrimitive}}
{{#fieldIsBlob}}
  inline {{fieldType}}::Builder get{{fieldTitleCase}}();
  inline void set{{fieldTitleCase}}({{fieldType}}::Reader value);
  inline {{fieldType}}::Builder init{{fieldTitleCase}}(unsigned int size);
{{/fieldIsBlob}}
{{#fieldIsStruct}}
  inline {{fieldType}}::Builder init{{fieldTitleCase}}();
  inline {{fieldType}}::Builder get{{fieldTitleCase}}();
{{/fieldIsStruct}}
{{#fieldIsNonStructList}}
{{#fieldIsInlineList}}
  inline {{fieldType}}::Builder init{{fieldTitleCase}}();
{{/fieldIsInlineList}}
{{^fieldIsInlineList}}
  inline {{fieldType}}::Builder init{{fieldTitleCase}}(unsigned int size);
{{/fieldIsInlineList}}
  inline {{fieldType}}::Builder get{{fieldTitleCase}}();
  template <typename _t>
  inline void set{{fieldTitleCase}}(const _t& other);
{{#fieldIsPrimitiveList}}
  inline void set{{fieldTitleCase}}(std::initializer_list<{{fieldElementType}}> other);
{{/fieldIsPrimitiveList}}
{{^fieldIsPrimitiveList}}
  inline void set{{fieldTitleCase}}(std::initializer_list<{{fieldElementType}}::Reader> other);
{{/fieldIsPrimitiveList}}
{{/fieldIsNonStructList}}
{{#fieldIsStructList}}
{{#fieldIsInlineList}}
  inline {{fieldType}}::Builder init{{fieldTitleCase}}();
{{/fieldIsInlineList}}
{{^fieldIsInlineList}}
  inline {{fieldType}}::Builder init{{fieldTitleCase}}(unsigned int size);
{{/fieldIsInlineList}}
  inline {{fieldType}}::Builder get{{fieldTitleCase}}();
{{/fieldIsStructList}}
{{/typeFields}}
private:
  ::capnproto::internal::StructBuilder _builder;
};
{{/typeStructOrUnion}}
{{/fileTypes}}
{{! =========================================================================================== }}
{{#fileTypes}}
{{#typeStructOrUnion}}
{{#typeStruct}}
{{#structUnions}}

inline {{unionFullName}}::Reader {{structFullName}}::Reader::get{{unionTitleCase}}() {
  return {{unionFullName}}::Reader(_reader);
}

inline {{unionFullName}}::Builder {{structFullName}}::Builder::get{{unionTitleCase}}() {
  return {{unionFullName}}::Builder(_builder);
}
{{/structUnions}}
{{/typeStruct}}
{{#typeUnion}}

// {{unionFullName}}
inline {{unionFullName}}::Which {{unionFullName}}::Reader::which() {
  return _reader.getDataField<Which>({{unionTagOffset}} * ::capnproto::ELEMENTS);
}

inline {{unionFullName}}::Which {{unionFullName}}::Builder::which() {
  return _builder.getDataField<Which>({{unionTagOffset}} * ::capnproto::ELEMENTS);
}
{{/typeUnion}}
{{! ------------------------------------------------------------------------------------------- }}
{{#typeFields}}

// {{typeFullName}}::{{fieldDecl}}
{{! ------------------------------------------------------------------------------------------- }}
{{#fieldIsPrimitive}}
inline {{fieldType}} {{typeFullName}}::Reader::get{{fieldTitleCase}}() {
{{#fieldUnion}}
  CAPNPROTO_INLINE_DPRECOND(which() == {{unionTitleCase}}::{{fieldUpperCase}},
                            "Must check which() before get()ing a union member.");
{{/fieldUnion}}
  return _reader.getDataField<{{fieldType}}>(
      {{fieldOffset}} * ::capnproto::ELEMENTS{{fieldDefaultMask}});
}

inline {{fieldType}} {{typeFullName}}::Builder::get{{fieldTitleCase}}() {
{{#fieldUnion}}
  CAPNPROTO_INLINE_DPRECOND(which() == {{unionTitleCase}}::{{fieldUpperCase}},
                            "Must check which() before get()ing a union member.");
{{/fieldUnion}}
  return _builder.getDataField<{{fieldType}}>(
      {{fieldOffset}} * ::capnproto::ELEMENTS{{fieldDefaultMask}});
}
inline void {{typeFullName}}::Builder::set{{fieldTitleCase}}({{fieldType}} value{{fieldSetterDefault}}) {
{{#fieldUnion}}
  _builder.setDataField<{{unionTitleCase}}::Which>(
      {{unionTagOffset}} * ::capnproto::ELEMENTS, {{unionTitleCase}}::{{fieldUpperCase}});
{{/fieldUnion}}
  return _builder.setDataField<{{fieldType}}>(
      {{fieldOffset}} * ::capnproto::ELEMENTS, value{{fieldDefaultMask}});
}
{{/fieldIsPrimitive}}
{{! ------------------------------------------------------------------------------------------- }}
{{#fieldIsBlob}}
inline {{fieldType}}::Reader {{typeFullName}}::Reader::get{{fieldTitleCase}}() {
{{#fieldUnion}}
  CAPNPROTO_INLINE_DPRECOND(which() == {{unionTitleCase}}::{{fieldUpperCase}},
                            "Must check which() before get()ing a union member.");
{{/fieldUnion}}
  return _reader.get{{fieldBlobType}}Field(
      {{fieldOffset}} * ::capnproto::REFERENCES,
{{#fieldDefaultBytes}}
      DEFAULT_{{fieldUpperCase}}.words, {{defaultBlobSize}} * ::capnproto::BYTES
{{/fieldDefaultBytes}}
      {{^fieldDefaultBytes}}nullptr, 0 * ::capnproto::BYTES{{/fieldDefaultBytes}});
}

inline {{fieldType}}::Builder {{typeFullName}}::Builder::get{{fieldTitleCase}}() {
{{#fieldUnion}}
  CAPNPROTO_INLINE_DPRECOND(which() == {{unionTitleCase}}::{{fieldUpperCase}},
                            "Must check which() before get()ing a union member.");
{{/fieldUnion}}
  return _builder.get{{fieldBlobType}}Field({{fieldOffset}} * ::capnproto::REFERENCES,
{{#fieldDefaultBytes}}
      DEFAULT_{{fieldUpperCase}}.words, {{defaultBlobSize}} * ::capnproto::BYTES
{{/fieldDefaultBytes}}
      {{^fieldDefaultBytes}}nullptr, 0 * ::capnproto::BYTES{{/fieldDefaultBytes}});
}
inline void {{typeFullName}}::Builder::set{{fieldTitleCase}}({{fieldType}}::Reader value) {
{{#fieldUnion}}
  _builder.setDataField<{{unionTitleCase}}::Which>(
      {{unionTagOffset}} * ::capnproto::ELEMENTS, {{unionTitleCase}}::{{fieldUpperCase}});
{{/fieldUnion}}
  _builder.set{{fieldBlobType}}Field({{fieldOffset}} * ::capnproto::REFERENCES, value);
}
inline {{fieldType}}::Builder {{typeFullName}}::Builder::init{{fieldTitleCase}}(unsigned int size) {
{{#fieldUnion}}
  _builder.setDataField<{{unionTitleCase}}::Which>(
      {{unionTagOffset}} * ::capnproto::ELEMENTS, {{unionTitleCase}}::{{fieldUpperCase}});
{{/fieldUnion}}
  return _builder.init{{fieldBlobType}}Field(
      {{fieldOffset}} * ::capnproto::REFERENCES, size * ::capnproto::BYTES);
}
{{/fieldIsBlob}}
{{! ------------------------------------------------------------------------------------------- }}
{{#fieldIsStruct}}
{{^fieldIsInlineStruct}}
inline {{fieldType}}::Reader {{typeFullName}}::Reader::get{{fieldTitleCase}}() {
{{#fieldUnion}}
  CAPNPROTO_INLINE_DPRECOND(which() == {{unionTitleCase}}::{{fieldUpperCase}},
                            "Must check which() before get()ing a union member.");
{{/fieldUnion}}
  return {{fieldType}}::Reader(_reader.getStructField(
      {{fieldOffset}} * ::capnproto::REFERENCES,
      {{#fieldDefaultBytes}}DEFAULT_{{fieldUpperCase}}.words{{/fieldDefaultBytes}}
      {{^fieldDefaultBytes}}nullptr{{/fieldDefaultBytes}}));
}

inline {{fieldType}}::Builder {{typeFullName}}::Builder::init{{fieldTitleCase}}() {
{{#fieldUnion}}
  _builder.setDataField<{{unionTitleCase}}::Which>(
      {{unionTagOffset}} * ::capnproto::ELEMENTS, {{unionTitleCase}}::{{fieldUpperCase}});
{{/fieldUnion}}
  return {{fieldType}}::Builder(_builder.initStructField(
      {{fieldOffset}} * ::capnproto::REFERENCES, {{fieldType}}::STRUCT_SIZE));
}
inline {{fieldType}}::Builder {{typeFullName}}::Builder::get{{fieldTitleCase}}() {
{{#fieldUnion}}
  CAPNPROTO_INLINE_DPRECOND(which() == {{unionTitleCase}}::{{fieldUpperCase}},
                            "Must check which() before get()ing a union member.");
{{/fieldUnion}}
  return {{fieldType}}::Builder(_builder.getStructField(
      {{fieldOffset}} * ::capnproto::REFERENCES, {{fieldType}}::STRUCT_SIZE,
      {{#fieldDefaultBytes}}DEFAULT_{{fieldUpperCase}}.words{{/fieldDefaultBytes}}
      {{^fieldDefaultBytes}}nullptr{{/fieldDefaultBytes}}));
}
{{/fieldIsInlineStruct}}
{{#fieldIsInlineStruct}}
inline {{fieldType}}::Reader {{typeFullName}}::Reader::get{{fieldTitleCase}}() {
{{#fieldUnion}}
  CAPNPROTO_INLINE_DPRECOND(which() == {{unionTitleCase}}::{{fieldUpperCase}},
                            "Must check which() before get()ing a union member.");
{{/fieldUnion}}
  return {{fieldType}}::Reader(_reader.getInlineStructField(
      {{fieldOffset}}));
}

inline {{fieldType}}::Builder {{typeFullName}}::Builder::init{{fieldTitleCase}}() {
{{#fieldUnion}}
  _builder.setDataField<{{unionTitleCase}}::Which>(
      {{unionTagOffset}} * ::capnproto::ELEMENTS, {{unionTitleCase}}::{{fieldUpperCase}});
{{/fieldUnion}}
  return {{fieldType}}::Builder(_builder.initInlineStructField(
      {{fieldOffset}}));
}
inline {{fieldType}}::Builder {{typeFullName}}::Builder::get{{fieldTitleCase}}() {
{{#fieldUnion}}
  CAPNPROTO_INLINE_DPRECOND(which() == {{unionTitleCase}}::{{fieldUpperCase}},
                            "Must check which() before get()ing a union member.");
{{/fieldUnion}}
  return {{fieldType}}::Builder(_builder.getInlineStructField(
      {{fieldOffset}}));
}
{{/fieldIsInlineStruct}}
{{/fieldIsStruct}}
{{! ------------------------------------------------------------------------------------------- }}
{{#fieldIsNonStructList}}
{{#fieldIsInlineList}}
{{#fieldIsPrimitiveList}}
inline {{fieldType}}::Reader {{typeFullName}}::Reader::get{{fieldTitleCase}}() {
{{#fieldUnion}}
  CAPNPROTO_INLINE_DPRECOND(which() == {{unionTitleCase}}::{{fieldUpperCase}},
                            "Must check which() before get()ing a union member.");
{{/fieldUnion}}
  return {{fieldType}}::Reader(_reader.getInlineDataListField(
      {{fieldInlineDataOffset}} * ::capnproto::BITS,
      {{fieldInlineListSize}} * ::capnproto::ELEMENTS,
      ::capnproto::internal::FieldSize::{{fieldElementSize}}));
}

inline {{fieldType}}::Builder {{typeFullName}}::Builder::init{{fieldTitleCase}}() {
{{#fieldUnion}}
  _builder.setDataField<{{unionTitleCase}}::Which>(
      {{unionTagOffset}} * ::capnproto::ELEMENTS, {{unionTitleCase}}::{{fieldUpperCase}});
{{/fieldUnion}}
  return {{fieldType}}::Builder(_builder.initInlineDataListField(
      {{fieldInlineDataOffset}} * ::capnproto::BITS,
      {{fieldInlineDataSize}} * ::capnproto::BITS,
      {{fieldInlineListSize}} * ::capnproto::ELEMENTS,
      ::capnproto::internal::FieldSize::{{fieldElementSize}}));
}
inline {{fieldType}}::Builder {{typeFullName}}::Builder::get{{fieldTitleCase}}() {
{{#fieldUnion}}
  CAPNPROTO_INLINE_DPRECOND(which() == {{unionTitleCase}}::{{fieldUpperCase}},
                            "Must check which() before get()ing a union member.");
{{/fieldUnion}}
  return {{fieldType}}::Builder(_builder.getInlineDataListField(
      {{fieldInlineDataOffset}} * ::capnproto::BITS,
      {{fieldInlineListSize}} * ::capnproto::ELEMENTS,
      ::capnproto::internal::FieldSize::{{fieldElementSize}}));
}
{{/fieldIsPrimitiveList}}
{{^fieldIsPrimitiveList}}
inline {{fieldType}}::Reader {{typeFullName}}::Reader::get{{fieldTitleCase}}() {
{{#fieldUnion}}
  CAPNPROTO_INLINE_DPRECOND(which() == {{unionTitleCase}}::{{fieldUpperCase}},
                            "Must check which() before get()ing a union member.");
{{/fieldUnion}}
  return {{fieldType}}::Reader(_reader.getInlinePointerListField(
      {{fieldInlinePointerOffset}} * ::capnproto::REFERENCES,
      {{fieldInlineListSize}} * ::capnproto::ELEMENTS));
}

inline {{fieldType}}::Builder {{typeFullName}}::Builder::init{{fieldTitleCase}}() {
{{#fieldUnion}}
  _builder.setDataField<{{unionTitleCase}}::Which>(
      {{unionTagOffset}} * ::capnproto::ELEMENTS, {{unionTitleCase}}::{{fieldUpperCase}});
{{/fieldUnion}}
  return {{fieldType}}::Builder(_builder.initInlinePointerListField(
      {{fieldInlinePointerOffset}} * ::capnproto::REFERENCES,
      {{fieldInlinePointerSize}} * ::capnproto::REFERENCES,
      {{fieldInlineListSize}} * ::capnproto::ELEMENTS));
}
inline {{fieldType}}::Builder {{typeFullName}}::Builder::get{{fieldTitleCase}}() {
{{#fieldUnion}}
  CAPNPROTO_INLINE_DPRECOND(which() == {{unionTitleCase}}::{{fieldUpperCase}},
                            "Must check which() before get()ing a union member.");
{{/fieldUnion}}
  return {{fieldType}}::Builder(_builder.getInlinePointerListField(
      {{fieldInlinePointerOffset}} * ::capnproto::REFERENCES,
      {{fieldInlineListSize}} * ::capnproto::ELEMENTS));
}
{{/fieldIsPrimitiveList}}
{{/fieldIsInlineList}}
{{! --------------------------------- }}
{{^fieldIsInlineList}}
inline {{fieldType}}::Reader {{typeFullName}}::Reader::get{{fieldTitleCase}}() {
{{#fieldUnion}}
  CAPNPROTO_INLINE_DPRECOND(which() == {{unionTitleCase}}::{{fieldUpperCase}},
                            "Must check which() before get()ing a union member.");
{{/fieldUnion}}
  return {{fieldType}}::Reader(_reader.getListField(
      {{fieldOffset}} * ::capnproto::REFERENCES,
      ::capnproto::internal::FieldSize::{{fieldElementSize}},
      {{#fieldDefaultBytes}}DEFAULT_{{fieldUpperCase}}.words{{/fieldDefaultBytes}}
      {{^fieldDefaultBytes}}nullptr{{/fieldDefaultBytes}}));
}

inline {{fieldType}}::Builder {{typeFullName}}::Builder::init{{fieldTitleCase}}(unsigned int size) {
{{#fieldUnion}}
  _builder.setDataField<{{unionTitleCase}}::Which>(
      {{unionTagOffset}} * ::capnproto::ELEMENTS, {{unionTitleCase}}::{{fieldUpperCase}});
{{/fieldUnion}}
  return {{fieldType}}::Builder(_builder.initListField(
      {{fieldOffset}} * ::capnproto::REFERENCES,
      ::capnproto::internal::FieldSize::{{fieldElementSize}},
      size * ::capnproto::ELEMENTS));
}
inline {{fieldType}}::Builder {{typeFullName}}::Builder::get{{fieldTitleCase}}() {
{{#fieldUnion}}
  CAPNPROTO_INLINE_DPRECOND(which() == {{unionTitleCase}}::{{fieldUpperCase}},
                            "Must check which() before get()ing a union member.");
{{/fieldUnion}}
  return {{fieldType}}::Builder(_builder.getListField(
      {{fieldOffset}} * ::capnproto::REFERENCES,
      {{#fieldDefaultBytes}}DEFAULT_{{fieldUpperCase}}.words{{/fieldDefaultBytes}}
      {{^fieldDefaultBytes}}nullptr{{/fieldDefaultBytes}}));
}
{{/fieldIsInlineList}}
{{! --------------------------------- }}

template <typename _t>
inline void {{typeFullName}}::Builder::set{{fieldTitleCase}}(const _t& other) {
{{#fieldUnion}}
  _builder.setDataField<{{unionTitleCase}}::Which>(
      {{unionTagOffset}} * ::capnproto::ELEMENTS, {{unionTitleCase}}::{{fieldUpperCase}});
{{/fieldUnion}}
  init{{fieldTitleCase}}({{^fieldIsInlineList}}other.size(){{/fieldIsInlineList}}).copyFrom(other);
}
{{#fieldIsPrimitiveList}}
inline void {{typeFullName}}::Builder::set{{fieldTitleCase}}(
    std::initializer_list<{{fieldElementType}}> other) {
{{#fieldUnion}}
  _builder.setDataField<{{unionTitleCase}}::Which>(
      {{unionTagOffset}} * ::capnproto::ELEMENTS, {{unionTitleCase}}::{{fieldUpperCase}});
{{/fieldUnion}}
  init{{fieldTitleCase}}({{^fieldIsInlineList}}other.size(){{/fieldIsInlineList}}).copyFrom(other);
}
{{/fieldIsPrimitiveList}}
{{^fieldIsPrimitiveList}}
inline void {{typeFullName}}::Builder::set{{fieldTitleCase}}(
    std::initializer_list<{{fieldElementType}}::Reader> other) {
{{#fieldUnion}}
  _builder.setDataField<{{unionTitleCase}}::Which>(
      {{unionTagOffset}} * ::capnproto::ELEMENTS, {{unionTitleCase}}::{{fieldUpperCase}});
{{/fieldUnion}}
  init{{fieldTitleCase}}({{^fieldIsInlineList}}other.size(){{/fieldIsInlineList}}).copyFrom(other);
}
{{/fieldIsPrimitiveList}}
{{/fieldIsNonStructList}}
{{! ------------------------------------------------------------------------------------------- }}
{{#fieldIsStructList}}
{{#fieldIsInlineList}}
inline {{fieldType}}::Reader {{typeFullName}}::Reader::get{{fieldTitleCase}}() {
{{#fieldUnion}}
  CAPNPROTO_INLINE_DPRECOND(which() == {{unionTitleCase}}::{{fieldUpperCase}},
                            "Must check which() before get()ing a union member.");
{{/fieldUnion}}
  return {{fieldType}}::Reader(_reader.getInlineStructListField(
      {{fieldInlineDataOffset}} * ::capnproto::BITS,
      {{fieldInlinePointerOffset}} * ::capnproto::REFERENCES,
      {{fieldInlineListSize}} * ::capnproto::ELEMENTS,
      {{fieldElementType}}::STRUCT_SIZE));
}

inline {{fieldType}}::Builder {{typeFullName}}::Builder::init{{fieldTitleCase}}() {
{{#fieldUnion}}
  _builder.setDataField<{{unionTitleCase}}::Which>(
      {{unionTagOffset}} * ::capnproto::ELEMENTS, {{unionTitleCase}}::{{fieldUpperCase}});
{{/fieldUnion}}
  return {{fieldType}}::Builder(_builder.initInlineStructListField(
      {{fieldInlineDataOffset}} * ::capnproto::BITS,
      {{fieldInlinePointerOffset}} * ::capnproto::REFERENCES,
      {{fieldInlineListSize}} * ::capnproto::ELEMENTS,
      {{fieldElementType}}::STRUCT_SIZE));
}
inline {{fieldType}}::Builder {{typeFullName}}::Builder::get{{fieldTitleCase}}() {
{{#fieldUnion}}
  CAPNPROTO_INLINE_DPRECOND(which() == {{unionTitleCase}}::{{fieldUpperCase}},
                            "Must check which() before get()ing a union member.");
{{/fieldUnion}}
  return {{fieldType}}::Builder(_builder.getInlineStructListField(
      {{fieldInlineDataOffset}} * ::capnproto::BITS,
      {{fieldInlinePointerOffset}} * ::capnproto::REFERENCES,
      {{fieldInlineListSize}} * ::capnproto::ELEMENTS,
      {{fieldElementType}}::STRUCT_SIZE));
}
{{/fieldIsInlineList}}
{{^fieldIsInlineList}}
inline {{fieldType}}::Reader {{typeFullName}}::Reader::get{{fieldTitleCase}}() {
{{#fieldUnion}}
  CAPNPROTO_INLINE_DPRECOND(which() == {{unionTitleCase}}::{{fieldUpperCase}},
                            "Must check which() before get()ing a union member.");
{{/fieldUnion}}
  return {{fieldType}}::Reader(_reader.getListField(
      {{fieldOffset}} * ::capnproto::REFERENCES,
      ::capnproto::internal::FieldSize::INLINE_COMPOSITE,
      {{#fieldDefaultBytes}}DEFAULT_{{fieldUpperCase}}.words{{/fieldDefaultBytes}}
      {{^fieldDefaultBytes}}nullptr{{/fieldDefaultBytes}}));
}

inline {{fieldType}}::Builder {{typeFullName}}::Builder::init{{fieldTitleCase}}(unsigned int size) {
{{#fieldUnion}}
  _builder.setDataField<{{unionTitleCase}}::Which>(
      {{unionTagOffset}} * ::capnproto::ELEMENTS, {{unionTitleCase}}::{{fieldUpperCase}});
{{/fieldUnion}}
  return {{fieldType}}::Builder(_builder.initStructListField(
      {{fieldOffset}} * ::capnproto::REFERENCES, size * ::capnproto::ELEMENTS,
      {{fieldElementType}}::STRUCT_SIZE));
}
inline {{fieldType}}::Builder {{typeFullName}}::Builder::get{{fieldTitleCase}}() {
{{#fieldUnion}}
  CAPNPROTO_INLINE_DPRECOND(which() == {{unionTitleCase}}::{{fieldUpperCase}},
                            "Must check which() before get()ing a union member.");
{{/fieldUnion}}
  return {{fieldType}}::Builder(_builder.getListField(
      {{fieldOffset}} * ::capnproto::REFERENCES,
      {{#fieldDefaultBytes}}DEFAULT_{{fieldUpperCase}}.words{{/fieldDefaultBytes}}
      {{^fieldDefaultBytes}}nullptr{{/fieldDefaultBytes}}));
}
{{/fieldIsInlineList}}
{{/fieldIsStructList}}
{{/typeFields}}
{{/typeStructOrUnion}}
{{/fileTypes}}
{{! =========================================================================================== }}

{{#fileNamespaces}}
}  // namespace
{{/fileNamespaces}}
#endif  // {{fileIncludeGuard}}
