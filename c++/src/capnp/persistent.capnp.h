// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: persistent.capnp

#ifndef CAPNP_INCLUDED_b8630836983feed7_
#define CAPNP_INCLUDED_b8630836983feed7_

#include <capnp/generated-header-support.h>
#if !CAPNP_LITE
#include <capnp/capability.h>
#endif  // !CAPNP_LITE

#if CAPNP_VERSION != 5000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(c8cb212fcd9f5691);
CAPNP_DECLARE_SCHEMA(c98603600e7ffbf6);
CAPNP_DECLARE_SCHEMA(f8d831c87ab7a90f);

}  // namespace schemas
}  // namespace capnp

namespace capnp {

template <typename SturdyRef = ::capnp::AnyPointer>
struct Persistent {
  Persistent() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  struct SaveParams;
  struct SaveResults;

  CAPNP_DECLARE_TEMPLATE_INTERFACE(c8cb212fcd9f5691, SturdyRef);
};

template <typename SturdyRef>
struct Persistent<SturdyRef>::SaveParams {
  SaveParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  CAPNP_DECLARE_TEMPLATE_STRUCT(c98603600e7ffbf6, 0, 0, SturdyRef);
};

template <typename SturdyRef>
struct Persistent<SturdyRef>::SaveResults {
  SaveResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  CAPNP_DECLARE_TEMPLATE_STRUCT(f8d831c87ab7a90f, 0, 1, SturdyRef);
};

// =======================================================================================

#if !CAPNP_LITE
template <typename SturdyRef>
class Persistent<SturdyRef>::Client
    : public virtual ::capnp::Capability::Client {
public:
  typedef Persistent<SturdyRef> Calls;
  typedef Persistent<SturdyRef> Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  ::capnp::Request<typename  ::capnp::Persistent<SturdyRef>::SaveParams, typename  ::capnp::Persistent<SturdyRef>::SaveResults> saveRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

template <typename SturdyRef>
class Persistent<SturdyRef>::Server
    : public virtual ::capnp::Capability::Server {
public:
  typedef Persistent<SturdyRef> Serves;

  ::kj::Promise<void> dispatchCall(uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef typename  ::capnp::Persistent<SturdyRef>::SaveParams SaveParams;
  typedef typename  ::capnp::Persistent<SturdyRef>::SaveResults SaveResults;
  typedef ::capnp::CallContext<SaveParams, SaveResults> SaveContext;
  virtual ::kj::Promise<void> save(SaveContext context);

  ::kj::Promise<void> dispatchCallInternal(uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

template <typename SturdyRef>
class Persistent<SturdyRef>::SaveParams::Reader {
public:
  typedef SaveParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename SturdyRef>
class Persistent<SturdyRef>::SaveParams::Builder {
public:
  typedef SaveParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
};

#if !CAPNP_LITE
template <typename SturdyRef>
class Persistent<SturdyRef>::SaveParams::Pipeline {
public:
  typedef SaveParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename SturdyRef>
class Persistent<SturdyRef>::SaveResults::Reader {
public:
  typedef SaveResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasSturdyRef() const;
  inline  ::capnp::ReaderFor<SturdyRef> getSturdyRef() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename SturdyRef>
class Persistent<SturdyRef>::SaveResults::Builder {
public:
  typedef SaveResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasSturdyRef();
  inline  ::capnp::BuilderFor<SturdyRef> getSturdyRef();
  inline void setSturdyRef( ::capnp::ReaderFor<SturdyRef> value);
  inline  ::capnp::BuilderFor<SturdyRef> initSturdyRef();
  inline  ::capnp::BuilderFor<SturdyRef> initSturdyRef(unsigned int size);
  inline void adoptSturdyRef(::capnp::Orphan<SturdyRef>&& value);
  inline ::capnp::Orphan<SturdyRef> disownSturdyRef();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
};

#if !CAPNP_LITE
template <typename SturdyRef>
class Persistent<SturdyRef>::SaveResults::Pipeline {
public:
  typedef SaveResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::capnp::PipelineFor<SturdyRef> getSturdyRef();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

#if !CAPNP_LITE
template <typename SturdyRef>
inline Persistent<SturdyRef>::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
template <typename SturdyRef>
inline Persistent<SturdyRef>::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename SturdyRef>
template <typename _t, typename>
inline Persistent<SturdyRef>::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename SturdyRef>
template <typename _t, typename>
inline Persistent<SturdyRef>::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
template <typename SturdyRef>
inline Persistent<SturdyRef>::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
template <typename SturdyRef>
inline typename  ::capnp::Persistent<SturdyRef>::Client& Persistent<SturdyRef>::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
template <typename SturdyRef>
inline typename  ::capnp::Persistent<SturdyRef>::Client& Persistent<SturdyRef>::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
CAPNP_DEFINE_TEMPLATE_STRUCT(Persistent<SturdyRef>::SaveParams, template <typename SturdyRef>
, c98603600e7ffbf6, {
  { 0xc8cb212fcd9f5691 CAPNP_COMMA  brandBindings + 0 CAPNP_COMMA  1 CAPNP_COMMA  false} CAPNP_COMMA 
}, {
  ::capnp::_::brandBindingFor<SturdyRef>() CAPNP_COMMA 
}, {
});
template <typename SturdyRef>
inline bool Persistent<SturdyRef>::SaveResults::Reader::hasSturdyRef() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename SturdyRef>
inline bool Persistent<SturdyRef>::SaveResults::Builder::hasSturdyRef() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename SturdyRef>
inline  ::capnp::ReaderFor<SturdyRef> Persistent<SturdyRef>::SaveResults::Reader::getSturdyRef() const {
  return ::capnp::_::PointerHelpers<SturdyRef>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
template <typename SturdyRef>
inline  ::capnp::BuilderFor<SturdyRef> Persistent<SturdyRef>::SaveResults::Builder::getSturdyRef() {
  return ::capnp::_::PointerHelpers<SturdyRef>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
template <typename SturdyRef>
inline  ::capnp::PipelineFor<SturdyRef> Persistent<SturdyRef>::SaveResults::Pipeline::getSturdyRef() {
  return  ::capnp::PipelineFor<SturdyRef>(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
template <typename SturdyRef>
inline void Persistent<SturdyRef>::SaveResults::Builder::setSturdyRef( ::capnp::ReaderFor<SturdyRef> value) {
  ::capnp::_::PointerHelpers<SturdyRef>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
template <typename SturdyRef>
inline  ::capnp::BuilderFor<SturdyRef> Persistent<SturdyRef>::SaveResults::Builder::initSturdyRef() {
  return ::capnp::_::PointerHelpers<SturdyRef>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
template <typename SturdyRef>
inline  ::capnp::BuilderFor<SturdyRef> Persistent<SturdyRef>::SaveResults::Builder::initSturdyRef(unsigned int size) {
  return ::capnp::_::PointerHelpers<SturdyRef>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
template <typename SturdyRef>
inline void Persistent<SturdyRef>::SaveResults::Builder::adoptSturdyRef(
    ::capnp::Orphan<SturdyRef>&& value) {
  ::capnp::_::PointerHelpers<SturdyRef>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
template <typename SturdyRef>
inline ::capnp::Orphan<SturdyRef> Persistent<SturdyRef>::SaveResults::Builder::disownSturdyRef() {
  return ::capnp::_::PointerHelpers<SturdyRef>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

CAPNP_DEFINE_TEMPLATE_STRUCT(Persistent<SturdyRef>::SaveResults, template <typename SturdyRef>
, f8d831c87ab7a90f, {
  { 0xc8cb212fcd9f5691 CAPNP_COMMA  brandBindings + 0 CAPNP_COMMA  1 CAPNP_COMMA  false} CAPNP_COMMA 
}, {
  ::capnp::_::brandBindingFor<SturdyRef>() CAPNP_COMMA 
}, {
});
#if !CAPNP_LITE
template <typename SturdyRef>
::capnp::Request<typename  ::capnp::Persistent<SturdyRef>::SaveParams, typename  ::capnp::Persistent<SturdyRef>::SaveResults>
Persistent<SturdyRef>::Client::saveRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall<typename  ::capnp::Persistent<SturdyRef>::SaveParams, typename  ::capnp::Persistent<SturdyRef>::SaveResults>(
      0xc8cb212fcd9f5691ull, 0, sizeHint);
}
template <typename SturdyRef>
::kj::Promise<void> Persistent<SturdyRef>::Server::save(SaveContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/persistent.capnp:Persistent", "save",
      0xc8cb212fcd9f5691ull, 0);
}
template <typename SturdyRef>
::kj::Promise<void> Persistent<SturdyRef>::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xc8cb212fcd9f5691ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("capnp/persistent.capnp:Persistent", interfaceId);
  }
}
template <typename SturdyRef>
::kj::Promise<void> Persistent<SturdyRef>::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return save(::capnp::Capability::Server::internalGetTypedContext<
          typename  ::capnp::Persistent<SturdyRef>::SaveParams, typename  ::capnp::Persistent<SturdyRef>::SaveResults>(context));
    default:
      return ::capnp::Capability::Server::internalUnimplemented(
          "capnp/persistent.capnp:Persistent",
          0xc8cb212fcd9f5691ull, methodId);
  }
}
#endif  // !CAPNP_LITE

CAPNP_DEFINE_TEMPLATE_INTERFACE(Persistent<SturdyRef>, template <typename SturdyRef>
, c8cb212fcd9f5691, {
  { 0xc8cb212fcd9f5691 CAPNP_COMMA  brandBindings + 0 CAPNP_COMMA  1 CAPNP_COMMA  false} CAPNP_COMMA 
}, {
  ::capnp::_::brandBindingFor<SturdyRef>() CAPNP_COMMA 
}, {
  { 33554432 CAPNP_COMMA   ::capnp::Persistent<SturdyRef>::SaveParams::_capnpPrivate::brand } CAPNP_COMMA 
  { 50331648 CAPNP_COMMA   ::capnp::Persistent<SturdyRef>::SaveResults::_capnpPrivate::brand } CAPNP_COMMA 
});
}  // namespace

#endif  // CAPNP_INCLUDED_b8630836983feed7_
