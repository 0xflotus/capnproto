// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: grammar.capnp

#ifndef CAPNP_INCLUDED_c56be168dcbbc3c6_
#define CAPNP_INCLUDED_c56be168dcbbc3c6_

#include <capnp/generated-header-support.h>

namespace capnp {
namespace compiler {

struct LocatedText {
  LocatedText() = delete;

  class Reader;
  class Builder;
};

struct LocatedInteger {
  LocatedInteger() = delete;

  class Reader;
  class Builder;
};

struct LocatedFloat {
  LocatedFloat() = delete;

  class Reader;
  class Builder;
};

struct DeclName {
  DeclName() = delete;

  class Reader;
  class Builder;
  struct Base;
};

struct DeclName::Base {
  Base() = delete;

  class Reader;
  class Builder;
  enum Which: uint16_t {
    ABSOLUTE_NAME,
    RELATIVE_NAME,
    IMPORT_NAME,
  };
};

struct TypeExpression {
  TypeExpression() = delete;

  class Reader;
  class Builder;
};

struct ValueExpression {
  ValueExpression() = delete;

  class Reader;
  class Builder;
  enum Which: uint16_t {
    UNKNOWN,
    POSITIVE_INT,
    NEGATIVE_INT,
    FLOAT,
    STRING,
    NAME,
    LIST,
    STRUCT,
  };
  struct FieldAssignment;
};

struct ValueExpression::FieldAssignment {
  FieldAssignment() = delete;

  class Reader;
  class Builder;
};

struct Declaration {
  Declaration() = delete;

  class Reader;
  class Builder;
  enum Which: uint16_t {
    FILE,
    USING,
    CONST,
    ENUM,
    ENUMERANT,
    STRUCT,
    FIELD,
    UNION,
    GROUP,
    INTERFACE,
    METHOD,
    ANNOTATION,
    NAKED_ID,
    NAKED_ANNOTATION,
    BUILTIN_VOID,
    BUILTIN_BOOL,
    BUILTIN_INT8,
    BUILTIN_INT16,
    BUILTIN_INT32,
    BUILTIN_INT64,
    BUILTIN_U_INT8,
    BUILTIN_U_INT16,
    BUILTIN_U_INT32,
    BUILTIN_U_INT64,
    BUILTIN_FLOAT32,
    BUILTIN_FLOAT64,
    BUILTIN_TEXT,
    BUILTIN_DATA,
    BUILTIN_LIST,
    BUILTIN_OBJECT,
  };
  struct AnnotationApplication;
  struct Param;
  struct Id;
  struct Using;
  struct Const;
  struct Field;
  struct Method;
  struct Annotation;
};

struct Declaration::AnnotationApplication {
  AnnotationApplication() = delete;

  class Reader;
  class Builder;
  struct Value;
};

struct Declaration::AnnotationApplication::Value {
  Value() = delete;

  class Reader;
  class Builder;
  enum Which: uint16_t {
    NONE,
    EXPRESSION,
  };
};

struct Declaration::Param {
  Param() = delete;

  class Reader;
  class Builder;
  struct DefaultValue;
};

struct Declaration::Param::DefaultValue {
  DefaultValue() = delete;

  class Reader;
  class Builder;
  enum Which: uint16_t {
    NONE,
    VALUE,
  };
};

struct Declaration::Id {
  Id() = delete;

  class Reader;
  class Builder;
  enum Which: uint16_t {
    UNSPECIFIED,
    UID,
    ORDINAL,
  };
};

struct Declaration::Using {
  Using() = delete;

  class Reader;
  class Builder;
};

struct Declaration::Const {
  Const() = delete;

  class Reader;
  class Builder;
};

struct Declaration::Field {
  Field() = delete;

  class Reader;
  class Builder;
  struct DefaultValue;
};

struct Declaration::Field::DefaultValue {
  DefaultValue() = delete;

  class Reader;
  class Builder;
  enum Which: uint16_t {
    NONE,
    VALUE,
  };
};

struct Declaration::Method {
  Method() = delete;

  class Reader;
  class Builder;
  struct ReturnType;
};

struct Declaration::Method::ReturnType {
  ReturnType() = delete;

  class Reader;
  class Builder;
  enum Which: uint16_t {
    NONE,
    EXPRESSION,
  };
};

struct Declaration::Annotation {
  Annotation() = delete;

  class Reader;
  class Builder;
};

struct ParsedFile {
  ParsedFile() = delete;

  class Reader;
  class Builder;
};

}  // namespace
}  // namespace

// =======================================================================================

namespace capnp {
namespace schemas {

extern const ::capnp::_::RawSchema s_e75816b56529d464;
extern const ::capnp::_::RawSchema s_991c7a3693d62cf2;
extern const ::capnp::_::RawSchema s_90f2a60678fd2367;
extern const ::capnp::_::RawSchema s_ce5c2afd239fe34e;
extern const ::capnp::_::RawSchema s_c42df56830922111;
extern const ::capnp::_::RawSchema s_8751968764a2e298;
extern const ::capnp::_::RawSchema s_9ca8b2acb16fc545;
extern const ::capnp::_::RawSchema s_b6b57cf8b27fba0e;
extern const ::capnp::_::RawSchema s_96efe787c17e83bb;
extern const ::capnp::_::RawSchema s_d00489d473826290;
extern const ::capnp::_::RawSchema s_fb5aeed95cdf6af9;
extern const ::capnp::_::RawSchema s_fffe08a9a697d2a5;
extern const ::capnp::_::RawSchema s_e5104515fd88ea47;
extern const ::capnp::_::RawSchema s_89f0c973c103ae96;
extern const ::capnp::_::RawSchema s_e93164a80bfe2ccf;
extern const ::capnp::_::RawSchema s_b348322a8dcf0d0c;
extern const ::capnp::_::RawSchema s_8f2622208fb358c8;
extern const ::capnp::_::RawSchema s_d0d1a21de617951f;
extern const ::capnp::_::RawSchema s_eb971847d617c0b9;
extern const ::capnp::_::RawSchema s_c6238c7d62d65173;
extern const ::capnp::_::RawSchema s_9cb9e86e3198037f;
extern const ::capnp::_::RawSchema s_84e4f3f5a807605c;

}  // namespace schemas
namespace _ {  // private

CAPNP_DECLARE_STRUCT(
    ::capnp::compiler::LocatedText, e75816b56529d464,
    1, 1, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnp::compiler::LocatedInteger, 991c7a3693d62cf2,
    2, 0, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnp::compiler::LocatedFloat, 90f2a60678fd2367,
    2, 0, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnp::compiler::DeclName, ce5c2afd239fe34e,
    2, 2, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnp::compiler::DeclName::Base, c42df56830922111,
    2, 2, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnp::compiler::TypeExpression, 8751968764a2e298,
    1, 2, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnp::compiler::ValueExpression, 9ca8b2acb16fc545,
    3, 1, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnp::compiler::ValueExpression::FieldAssignment, b6b57cf8b27fba0e,
    0, 2, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnp::compiler::Declaration, 96efe787c17e83bb,
    2, 7, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnp::compiler::Declaration::AnnotationApplication, d00489d473826290,
    1, 2, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnp::compiler::Declaration::AnnotationApplication::Value, fb5aeed95cdf6af9,
    1, 2, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnp::compiler::Declaration::Param, fffe08a9a697d2a5,
    1, 4, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnp::compiler::Declaration::Param::DefaultValue, e5104515fd88ea47,
    1, 4, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnp::compiler::Declaration::Id, 89f0c973c103ae96,
    2, 7, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnp::compiler::Declaration::Using, e93164a80bfe2ccf,
    2, 7, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnp::compiler::Declaration::Const, b348322a8dcf0d0c,
    2, 7, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnp::compiler::Declaration::Field, 8f2622208fb358c8,
    2, 7, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnp::compiler::Declaration::Field::DefaultValue, d0d1a21de617951f,
    2, 7, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnp::compiler::Declaration::Method, eb971847d617c0b9,
    2, 7, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnp::compiler::Declaration::Method::ReturnType, c6238c7d62d65173,
    2, 7, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnp::compiler::Declaration::Annotation, 9cb9e86e3198037f,
    2, 7, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnp::compiler::ParsedFile, 84e4f3f5a807605c,
    0, 1, POINTER);

}  // namespace _ (private)
}  // namespace capnp

// =======================================================================================

namespace capnp {
namespace compiler {

class LocatedText::Reader {
public:
  typedef LocatedText Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline bool hasValue() const;
  inline  ::capnp::Text::Reader getValue() const;

  inline bool hasStartByte() const;
  inline  ::uint32_t getStartByte() const;

  inline bool hasEndByte() const;
  inline  ::uint32_t getEndByte() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(LocatedText::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(LocatedText::Reader reader) {
  return ::capnp::_::structString<LocatedText>(reader._reader);
}

class LocatedText::Builder {
public:
  typedef LocatedText Builds;

  Builder() = default;
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline bool hasValue();
  inline  ::capnp::Text::Builder getValue();
  inline void setValue( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initValue(unsigned int size);
  inline void adoptValue(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownValue();

  inline bool hasStartByte();
  inline  ::uint32_t getStartByte();
  inline void setStartByte( ::uint32_t value);

  inline bool hasEndByte();
  inline  ::uint32_t getEndByte();
  inline void setEndByte( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(LocatedText::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(LocatedText::Builder builder) {
  return ::capnp::_::structString<LocatedText>(builder._builder.asReader());
}

class LocatedInteger::Reader {
public:
  typedef LocatedInteger Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline bool hasValue() const;
  inline  ::uint64_t getValue() const;

  inline bool hasStartByte() const;
  inline  ::uint32_t getStartByte() const;

  inline bool hasEndByte() const;
  inline  ::uint32_t getEndByte() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(LocatedInteger::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(LocatedInteger::Reader reader) {
  return ::capnp::_::structString<LocatedInteger>(reader._reader);
}

class LocatedInteger::Builder {
public:
  typedef LocatedInteger Builds;

  Builder() = default;
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline bool hasValue();
  inline  ::uint64_t getValue();
  inline void setValue( ::uint64_t value);

  inline bool hasStartByte();
  inline  ::uint32_t getStartByte();
  inline void setStartByte( ::uint32_t value);

  inline bool hasEndByte();
  inline  ::uint32_t getEndByte();
  inline void setEndByte( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(LocatedInteger::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(LocatedInteger::Builder builder) {
  return ::capnp::_::structString<LocatedInteger>(builder._builder.asReader());
}

class LocatedFloat::Reader {
public:
  typedef LocatedFloat Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline bool hasValue() const;
  inline double getValue() const;

  inline bool hasStartByte() const;
  inline  ::uint32_t getStartByte() const;

  inline bool hasEndByte() const;
  inline  ::uint32_t getEndByte() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(LocatedFloat::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(LocatedFloat::Reader reader) {
  return ::capnp::_::structString<LocatedFloat>(reader._reader);
}

class LocatedFloat::Builder {
public:
  typedef LocatedFloat Builds;

  Builder() = default;
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline bool hasValue();
  inline double getValue();
  inline void setValue(double value);

  inline bool hasStartByte();
  inline  ::uint32_t getStartByte();
  inline void setStartByte( ::uint32_t value);

  inline bool hasEndByte();
  inline  ::uint32_t getEndByte();
  inline void setEndByte( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(LocatedFloat::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(LocatedFloat::Builder builder) {
  return ::capnp::_::structString<LocatedFloat>(builder._builder.asReader());
}

class DeclName::Reader {
public:
  typedef DeclName Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline Base::Reader getBase() const;

  inline bool hasMemberPath() const;
  inline  ::capnp::List< ::capnp::compiler::LocatedText>::Reader getMemberPath() const;

  inline bool hasStartByte() const;
  inline  ::uint32_t getStartByte() const;

  inline bool hasEndByte() const;
  inline  ::uint32_t getEndByte() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(DeclName::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(DeclName::Reader reader) {
  return ::capnp::_::structString<DeclName>(reader._reader);
}

class DeclName::Builder {
public:
  typedef DeclName Builds;

  Builder() = default;
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline Base::Builder getBase();
  inline Base::Builder initBase();

  inline bool hasMemberPath();
  inline  ::capnp::List< ::capnp::compiler::LocatedText>::Builder getMemberPath();
  inline void setMemberPath( ::capnp::List< ::capnp::compiler::LocatedText>::Reader value);
  inline  ::capnp::List< ::capnp::compiler::LocatedText>::Builder initMemberPath(unsigned int size);
  inline void adoptMemberPath(::capnp::Orphan< ::capnp::List< ::capnp::compiler::LocatedText>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::compiler::LocatedText>> disownMemberPath();

  inline bool hasStartByte();
  inline  ::uint32_t getStartByte();
  inline void setStartByte( ::uint32_t value);

  inline bool hasEndByte();
  inline  ::uint32_t getEndByte();
  inline void setEndByte( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(DeclName::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(DeclName::Builder builder) {
  return ::capnp::_::structString<DeclName>(builder._builder.asReader());
}

class DeclName::Base::Reader {
public:
  typedef Base Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline Which which() const;
  inline bool hasAbsoluteName() const;
  inline  ::capnp::compiler::LocatedText::Reader getAbsoluteName() const;

  inline bool hasRelativeName() const;
  inline  ::capnp::compiler::LocatedText::Reader getRelativeName() const;

  inline bool hasImportName() const;
  inline  ::capnp::compiler::LocatedText::Reader getImportName() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(DeclName::Base::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(DeclName::Base::Reader reader) {
  return ::capnp::_::structString<DeclName::Base>(reader._reader);
}

class DeclName::Base::Builder {
public:
  typedef Base Builds;

  Builder() = default;
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline Which which();
  inline bool hasAbsoluteName();
  inline  ::capnp::compiler::LocatedText::Builder getAbsoluteName();
  inline void setAbsoluteName( ::capnp::compiler::LocatedText::Reader value);
  inline  ::capnp::compiler::LocatedText::Builder initAbsoluteName();
  inline void adoptAbsoluteName(::capnp::Orphan< ::capnp::compiler::LocatedText>&& value);
  inline ::capnp::Orphan< ::capnp::compiler::LocatedText> disownAbsoluteName();

  inline bool hasRelativeName();
  inline  ::capnp::compiler::LocatedText::Builder getRelativeName();
  inline void setRelativeName( ::capnp::compiler::LocatedText::Reader value);
  inline  ::capnp::compiler::LocatedText::Builder initRelativeName();
  inline void adoptRelativeName(::capnp::Orphan< ::capnp::compiler::LocatedText>&& value);
  inline ::capnp::Orphan< ::capnp::compiler::LocatedText> disownRelativeName();

  inline bool hasImportName();
  inline  ::capnp::compiler::LocatedText::Builder getImportName();
  inline void setImportName( ::capnp::compiler::LocatedText::Reader value);
  inline  ::capnp::compiler::LocatedText::Builder initImportName();
  inline void adoptImportName(::capnp::Orphan< ::capnp::compiler::LocatedText>&& value);
  inline ::capnp::Orphan< ::capnp::compiler::LocatedText> disownImportName();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(DeclName::Base::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(DeclName::Base::Builder builder) {
  return ::capnp::_::structString<DeclName::Base>(builder._builder.asReader());
}

class TypeExpression::Reader {
public:
  typedef TypeExpression Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline bool hasName() const;
  inline  ::capnp::compiler::DeclName::Reader getName() const;

  inline bool hasParams() const;
  inline  ::capnp::List< ::capnp::compiler::TypeExpression>::Reader getParams() const;

  inline bool hasStartByte() const;
  inline  ::uint32_t getStartByte() const;

  inline bool hasEndByte() const;
  inline  ::uint32_t getEndByte() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TypeExpression::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(TypeExpression::Reader reader) {
  return ::capnp::_::structString<TypeExpression>(reader._reader);
}

class TypeExpression::Builder {
public:
  typedef TypeExpression Builds;

  Builder() = default;
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline bool hasName();
  inline  ::capnp::compiler::DeclName::Builder getName();
  inline void setName( ::capnp::compiler::DeclName::Reader value);
  inline  ::capnp::compiler::DeclName::Builder initName();
  inline void adoptName(::capnp::Orphan< ::capnp::compiler::DeclName>&& value);
  inline ::capnp::Orphan< ::capnp::compiler::DeclName> disownName();

  inline bool hasParams();
  inline  ::capnp::List< ::capnp::compiler::TypeExpression>::Builder getParams();
  inline void setParams( ::capnp::List< ::capnp::compiler::TypeExpression>::Reader value);
  inline  ::capnp::List< ::capnp::compiler::TypeExpression>::Builder initParams(unsigned int size);
  inline void adoptParams(::capnp::Orphan< ::capnp::List< ::capnp::compiler::TypeExpression>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::compiler::TypeExpression>> disownParams();

  inline bool hasStartByte();
  inline  ::uint32_t getStartByte();
  inline void setStartByte( ::uint32_t value);

  inline bool hasEndByte();
  inline  ::uint32_t getEndByte();
  inline void setEndByte( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TypeExpression::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(TypeExpression::Builder builder) {
  return ::capnp::_::structString<TypeExpression>(builder._builder.asReader());
}

class ValueExpression::Reader {
public:
  typedef ValueExpression Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline Which which() const;
  inline bool hasUnknown() const;
  inline  ::capnp::Void getUnknown() const;

  inline bool hasPositiveInt() const;
  inline  ::uint64_t getPositiveInt() const;

  inline bool hasNegativeInt() const;
  inline  ::uint64_t getNegativeInt() const;

  inline bool hasFloat() const;
  inline double getFloat() const;

  inline bool hasString() const;
  inline  ::capnp::Text::Reader getString() const;

  inline bool hasName() const;
  inline  ::capnp::compiler::DeclName::Reader getName() const;

  inline bool hasList() const;
  inline  ::capnp::List< ::capnp::compiler::ValueExpression>::Reader getList() const;

  inline bool hasStruct() const;
  inline  ::capnp::List< ::capnp::compiler::ValueExpression::FieldAssignment>::Reader getStruct() const;

  inline bool hasStartByte() const;
  inline  ::uint32_t getStartByte() const;

  inline bool hasEndByte() const;
  inline  ::uint32_t getEndByte() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(ValueExpression::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(ValueExpression::Reader reader) {
  return ::capnp::_::structString<ValueExpression>(reader._reader);
}

class ValueExpression::Builder {
public:
  typedef ValueExpression Builds;

  Builder() = default;
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline Which which();
  inline bool hasUnknown();
  inline  ::capnp::Void getUnknown();
  inline void setUnknown( ::capnp::Void value = ::capnp::Void::VOID);

  inline bool hasPositiveInt();
  inline  ::uint64_t getPositiveInt();
  inline void setPositiveInt( ::uint64_t value);

  inline bool hasNegativeInt();
  inline  ::uint64_t getNegativeInt();
  inline void setNegativeInt( ::uint64_t value);

  inline bool hasFloat();
  inline double getFloat();
  inline void setFloat(double value);

  inline bool hasString();
  inline  ::capnp::Text::Builder getString();
  inline void setString( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initString(unsigned int size);
  inline void adoptString(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownString();

  inline bool hasName();
  inline  ::capnp::compiler::DeclName::Builder getName();
  inline void setName( ::capnp::compiler::DeclName::Reader value);
  inline  ::capnp::compiler::DeclName::Builder initName();
  inline void adoptName(::capnp::Orphan< ::capnp::compiler::DeclName>&& value);
  inline ::capnp::Orphan< ::capnp::compiler::DeclName> disownName();

  inline bool hasList();
  inline  ::capnp::List< ::capnp::compiler::ValueExpression>::Builder getList();
  inline void setList( ::capnp::List< ::capnp::compiler::ValueExpression>::Reader value);
  inline  ::capnp::List< ::capnp::compiler::ValueExpression>::Builder initList(unsigned int size);
  inline void adoptList(::capnp::Orphan< ::capnp::List< ::capnp::compiler::ValueExpression>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::compiler::ValueExpression>> disownList();

  inline bool hasStruct();
  inline  ::capnp::List< ::capnp::compiler::ValueExpression::FieldAssignment>::Builder getStruct();
  inline void setStruct( ::capnp::List< ::capnp::compiler::ValueExpression::FieldAssignment>::Reader value);
  inline  ::capnp::List< ::capnp::compiler::ValueExpression::FieldAssignment>::Builder initStruct(unsigned int size);
  inline void adoptStruct(::capnp::Orphan< ::capnp::List< ::capnp::compiler::ValueExpression::FieldAssignment>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::compiler::ValueExpression::FieldAssignment>> disownStruct();

  inline bool hasStartByte();
  inline  ::uint32_t getStartByte();
  inline void setStartByte( ::uint32_t value);

  inline bool hasEndByte();
  inline  ::uint32_t getEndByte();
  inline void setEndByte( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(ValueExpression::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(ValueExpression::Builder builder) {
  return ::capnp::_::structString<ValueExpression>(builder._builder.asReader());
}

class ValueExpression::FieldAssignment::Reader {
public:
  typedef FieldAssignment Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline bool hasFieldName() const;
  inline  ::capnp::compiler::LocatedText::Reader getFieldName() const;

  inline bool hasValue() const;
  inline  ::capnp::compiler::ValueExpression::Reader getValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(ValueExpression::FieldAssignment::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(ValueExpression::FieldAssignment::Reader reader) {
  return ::capnp::_::structString<ValueExpression::FieldAssignment>(reader._reader);
}

class ValueExpression::FieldAssignment::Builder {
public:
  typedef FieldAssignment Builds;

  Builder() = default;
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline bool hasFieldName();
  inline  ::capnp::compiler::LocatedText::Builder getFieldName();
  inline void setFieldName( ::capnp::compiler::LocatedText::Reader value);
  inline  ::capnp::compiler::LocatedText::Builder initFieldName();
  inline void adoptFieldName(::capnp::Orphan< ::capnp::compiler::LocatedText>&& value);
  inline ::capnp::Orphan< ::capnp::compiler::LocatedText> disownFieldName();

  inline bool hasValue();
  inline  ::capnp::compiler::ValueExpression::Builder getValue();
  inline void setValue( ::capnp::compiler::ValueExpression::Reader value);
  inline  ::capnp::compiler::ValueExpression::Builder initValue();
  inline void adoptValue(::capnp::Orphan< ::capnp::compiler::ValueExpression>&& value);
  inline ::capnp::Orphan< ::capnp::compiler::ValueExpression> disownValue();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(ValueExpression::FieldAssignment::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(ValueExpression::FieldAssignment::Builder builder) {
  return ::capnp::_::structString<ValueExpression::FieldAssignment>(builder._builder.asReader());
}

class Declaration::Reader {
public:
  typedef Declaration Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline Which which() const;
  inline bool hasName() const;
  inline  ::capnp::compiler::LocatedText::Reader getName() const;

  inline Id::Reader getId() const;

  inline bool hasNestedDecls() const;
  inline  ::capnp::List< ::capnp::compiler::Declaration>::Reader getNestedDecls() const;

  inline bool hasAnnotations() const;
  inline  ::capnp::List< ::capnp::compiler::Declaration::AnnotationApplication>::Reader getAnnotations() const;

  inline bool hasStartByte() const;
  inline  ::uint32_t getStartByte() const;

  inline bool hasEndByte() const;
  inline  ::uint32_t getEndByte() const;

  inline bool hasDocComment() const;
  inline  ::capnp::Text::Reader getDocComment() const;

  inline bool hasFile() const;
  inline  ::capnp::Void getFile() const;

  inline Using::Reader getUsing() const;

  inline Const::Reader getConst() const;

  inline bool hasEnum() const;
  inline  ::capnp::Void getEnum() const;

  inline bool hasEnumerant() const;
  inline  ::capnp::Void getEnumerant() const;

  inline bool hasStruct() const;
  inline  ::capnp::Void getStruct() const;

  inline Field::Reader getField() const;

  inline bool hasUnion() const;
  inline  ::capnp::Void getUnion() const;

  inline bool hasGroup() const;
  inline  ::capnp::Void getGroup() const;

  inline bool hasInterface() const;
  inline  ::capnp::Void getInterface() const;

  inline Method::Reader getMethod() const;

  inline Annotation::Reader getAnnotation() const;

  inline bool hasNakedId() const;
  inline  ::capnp::compiler::LocatedInteger::Reader getNakedId() const;

  inline bool hasNakedAnnotation() const;
  inline  ::capnp::compiler::Declaration::AnnotationApplication::Reader getNakedAnnotation() const;

  inline bool hasBuiltinVoid() const;
  inline  ::capnp::Void getBuiltinVoid() const;

  inline bool hasBuiltinBool() const;
  inline  ::capnp::Void getBuiltinBool() const;

  inline bool hasBuiltinInt8() const;
  inline  ::capnp::Void getBuiltinInt8() const;

  inline bool hasBuiltinInt16() const;
  inline  ::capnp::Void getBuiltinInt16() const;

  inline bool hasBuiltinInt32() const;
  inline  ::capnp::Void getBuiltinInt32() const;

  inline bool hasBuiltinInt64() const;
  inline  ::capnp::Void getBuiltinInt64() const;

  inline bool hasBuiltinUInt8() const;
  inline  ::capnp::Void getBuiltinUInt8() const;

  inline bool hasBuiltinUInt16() const;
  inline  ::capnp::Void getBuiltinUInt16() const;

  inline bool hasBuiltinUInt32() const;
  inline  ::capnp::Void getBuiltinUInt32() const;

  inline bool hasBuiltinUInt64() const;
  inline  ::capnp::Void getBuiltinUInt64() const;

  inline bool hasBuiltinFloat32() const;
  inline  ::capnp::Void getBuiltinFloat32() const;

  inline bool hasBuiltinFloat64() const;
  inline  ::capnp::Void getBuiltinFloat64() const;

  inline bool hasBuiltinText() const;
  inline  ::capnp::Void getBuiltinText() const;

  inline bool hasBuiltinData() const;
  inline  ::capnp::Void getBuiltinData() const;

  inline bool hasBuiltinList() const;
  inline  ::capnp::Void getBuiltinList() const;

  inline bool hasBuiltinObject() const;
  inline  ::capnp::Void getBuiltinObject() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(Declaration::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(Declaration::Reader reader) {
  return ::capnp::_::structString<Declaration>(reader._reader);
}

class Declaration::Builder {
public:
  typedef Declaration Builds;

  Builder() = default;
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline Which which();
  inline bool hasName();
  inline  ::capnp::compiler::LocatedText::Builder getName();
  inline void setName( ::capnp::compiler::LocatedText::Reader value);
  inline  ::capnp::compiler::LocatedText::Builder initName();
  inline void adoptName(::capnp::Orphan< ::capnp::compiler::LocatedText>&& value);
  inline ::capnp::Orphan< ::capnp::compiler::LocatedText> disownName();

  inline Id::Builder getId();
  inline Id::Builder initId();

  inline bool hasNestedDecls();
  inline  ::capnp::List< ::capnp::compiler::Declaration>::Builder getNestedDecls();
  inline void setNestedDecls( ::capnp::List< ::capnp::compiler::Declaration>::Reader value);
  inline  ::capnp::List< ::capnp::compiler::Declaration>::Builder initNestedDecls(unsigned int size);
  inline void adoptNestedDecls(::capnp::Orphan< ::capnp::List< ::capnp::compiler::Declaration>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::compiler::Declaration>> disownNestedDecls();

  inline bool hasAnnotations();
  inline  ::capnp::List< ::capnp::compiler::Declaration::AnnotationApplication>::Builder getAnnotations();
  inline void setAnnotations( ::capnp::List< ::capnp::compiler::Declaration::AnnotationApplication>::Reader value);
  inline  ::capnp::List< ::capnp::compiler::Declaration::AnnotationApplication>::Builder initAnnotations(unsigned int size);
  inline void adoptAnnotations(::capnp::Orphan< ::capnp::List< ::capnp::compiler::Declaration::AnnotationApplication>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::compiler::Declaration::AnnotationApplication>> disownAnnotations();

  inline bool hasStartByte();
  inline  ::uint32_t getStartByte();
  inline void setStartByte( ::uint32_t value);

  inline bool hasEndByte();
  inline  ::uint32_t getEndByte();
  inline void setEndByte( ::uint32_t value);

  inline bool hasDocComment();
  inline  ::capnp::Text::Builder getDocComment();
  inline void setDocComment( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDocComment(unsigned int size);
  inline void adoptDocComment(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDocComment();

  inline bool hasFile();
  inline  ::capnp::Void getFile();
  inline void setFile( ::capnp::Void value = ::capnp::Void::VOID);

  inline Using::Builder getUsing();
  inline Using::Builder initUsing();

  inline Const::Builder getConst();
  inline Const::Builder initConst();

  inline bool hasEnum();
  inline  ::capnp::Void getEnum();
  inline void setEnum( ::capnp::Void value = ::capnp::Void::VOID);

  inline bool hasEnumerant();
  inline  ::capnp::Void getEnumerant();
  inline void setEnumerant( ::capnp::Void value = ::capnp::Void::VOID);

  inline bool hasStruct();
  inline  ::capnp::Void getStruct();
  inline void setStruct( ::capnp::Void value = ::capnp::Void::VOID);

  inline Field::Builder getField();
  inline Field::Builder initField();

  inline bool hasUnion();
  inline  ::capnp::Void getUnion();
  inline void setUnion( ::capnp::Void value = ::capnp::Void::VOID);

  inline bool hasGroup();
  inline  ::capnp::Void getGroup();
  inline void setGroup( ::capnp::Void value = ::capnp::Void::VOID);

  inline bool hasInterface();
  inline  ::capnp::Void getInterface();
  inline void setInterface( ::capnp::Void value = ::capnp::Void::VOID);

  inline Method::Builder getMethod();
  inline Method::Builder initMethod();

  inline Annotation::Builder getAnnotation();
  inline Annotation::Builder initAnnotation();

  inline bool hasNakedId();
  inline  ::capnp::compiler::LocatedInteger::Builder getNakedId();
  inline void setNakedId( ::capnp::compiler::LocatedInteger::Reader value);
  inline  ::capnp::compiler::LocatedInteger::Builder initNakedId();
  inline void adoptNakedId(::capnp::Orphan< ::capnp::compiler::LocatedInteger>&& value);
  inline ::capnp::Orphan< ::capnp::compiler::LocatedInteger> disownNakedId();

  inline bool hasNakedAnnotation();
  inline  ::capnp::compiler::Declaration::AnnotationApplication::Builder getNakedAnnotation();
  inline void setNakedAnnotation( ::capnp::compiler::Declaration::AnnotationApplication::Reader value);
  inline  ::capnp::compiler::Declaration::AnnotationApplication::Builder initNakedAnnotation();
  inline void adoptNakedAnnotation(::capnp::Orphan< ::capnp::compiler::Declaration::AnnotationApplication>&& value);
  inline ::capnp::Orphan< ::capnp::compiler::Declaration::AnnotationApplication> disownNakedAnnotation();

  inline bool hasBuiltinVoid();
  inline  ::capnp::Void getBuiltinVoid();
  inline void setBuiltinVoid( ::capnp::Void value = ::capnp::Void::VOID);

  inline bool hasBuiltinBool();
  inline  ::capnp::Void getBuiltinBool();
  inline void setBuiltinBool( ::capnp::Void value = ::capnp::Void::VOID);

  inline bool hasBuiltinInt8();
  inline  ::capnp::Void getBuiltinInt8();
  inline void setBuiltinInt8( ::capnp::Void value = ::capnp::Void::VOID);

  inline bool hasBuiltinInt16();
  inline  ::capnp::Void getBuiltinInt16();
  inline void setBuiltinInt16( ::capnp::Void value = ::capnp::Void::VOID);

  inline bool hasBuiltinInt32();
  inline  ::capnp::Void getBuiltinInt32();
  inline void setBuiltinInt32( ::capnp::Void value = ::capnp::Void::VOID);

  inline bool hasBuiltinInt64();
  inline  ::capnp::Void getBuiltinInt64();
  inline void setBuiltinInt64( ::capnp::Void value = ::capnp::Void::VOID);

  inline bool hasBuiltinUInt8();
  inline  ::capnp::Void getBuiltinUInt8();
  inline void setBuiltinUInt8( ::capnp::Void value = ::capnp::Void::VOID);

  inline bool hasBuiltinUInt16();
  inline  ::capnp::Void getBuiltinUInt16();
  inline void setBuiltinUInt16( ::capnp::Void value = ::capnp::Void::VOID);

  inline bool hasBuiltinUInt32();
  inline  ::capnp::Void getBuiltinUInt32();
  inline void setBuiltinUInt32( ::capnp::Void value = ::capnp::Void::VOID);

  inline bool hasBuiltinUInt64();
  inline  ::capnp::Void getBuiltinUInt64();
  inline void setBuiltinUInt64( ::capnp::Void value = ::capnp::Void::VOID);

  inline bool hasBuiltinFloat32();
  inline  ::capnp::Void getBuiltinFloat32();
  inline void setBuiltinFloat32( ::capnp::Void value = ::capnp::Void::VOID);

  inline bool hasBuiltinFloat64();
  inline  ::capnp::Void getBuiltinFloat64();
  inline void setBuiltinFloat64( ::capnp::Void value = ::capnp::Void::VOID);

  inline bool hasBuiltinText();
  inline  ::capnp::Void getBuiltinText();
  inline void setBuiltinText( ::capnp::Void value = ::capnp::Void::VOID);

  inline bool hasBuiltinData();
  inline  ::capnp::Void getBuiltinData();
  inline void setBuiltinData( ::capnp::Void value = ::capnp::Void::VOID);

  inline bool hasBuiltinList();
  inline  ::capnp::Void getBuiltinList();
  inline void setBuiltinList( ::capnp::Void value = ::capnp::Void::VOID);

  inline bool hasBuiltinObject();
  inline  ::capnp::Void getBuiltinObject();
  inline void setBuiltinObject( ::capnp::Void value = ::capnp::Void::VOID);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(Declaration::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(Declaration::Builder builder) {
  return ::capnp::_::structString<Declaration>(builder._builder.asReader());
}

class Declaration::AnnotationApplication::Reader {
public:
  typedef AnnotationApplication Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline bool hasName() const;
  inline  ::capnp::compiler::DeclName::Reader getName() const;

  inline Value::Reader getValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(Declaration::AnnotationApplication::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(Declaration::AnnotationApplication::Reader reader) {
  return ::capnp::_::structString<Declaration::AnnotationApplication>(reader._reader);
}

class Declaration::AnnotationApplication::Builder {
public:
  typedef AnnotationApplication Builds;

  Builder() = default;
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline bool hasName();
  inline  ::capnp::compiler::DeclName::Builder getName();
  inline void setName( ::capnp::compiler::DeclName::Reader value);
  inline  ::capnp::compiler::DeclName::Builder initName();
  inline void adoptName(::capnp::Orphan< ::capnp::compiler::DeclName>&& value);
  inline ::capnp::Orphan< ::capnp::compiler::DeclName> disownName();

  inline Value::Builder getValue();
  inline Value::Builder initValue();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(Declaration::AnnotationApplication::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(Declaration::AnnotationApplication::Builder builder) {
  return ::capnp::_::structString<Declaration::AnnotationApplication>(builder._builder.asReader());
}

class Declaration::AnnotationApplication::Value::Reader {
public:
  typedef Value Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline Which which() const;
  inline bool hasNone() const;
  inline  ::capnp::Void getNone() const;

  inline bool hasExpression() const;
  inline  ::capnp::compiler::ValueExpression::Reader getExpression() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(Declaration::AnnotationApplication::Value::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(Declaration::AnnotationApplication::Value::Reader reader) {
  return ::capnp::_::structString<Declaration::AnnotationApplication::Value>(reader._reader);
}

class Declaration::AnnotationApplication::Value::Builder {
public:
  typedef Value Builds;

  Builder() = default;
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline Which which();
  inline bool hasNone();
  inline  ::capnp::Void getNone();
  inline void setNone( ::capnp::Void value = ::capnp::Void::VOID);

  inline bool hasExpression();
  inline  ::capnp::compiler::ValueExpression::Builder getExpression();
  inline void setExpression( ::capnp::compiler::ValueExpression::Reader value);
  inline  ::capnp::compiler::ValueExpression::Builder initExpression();
  inline void adoptExpression(::capnp::Orphan< ::capnp::compiler::ValueExpression>&& value);
  inline ::capnp::Orphan< ::capnp::compiler::ValueExpression> disownExpression();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(Declaration::AnnotationApplication::Value::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(Declaration::AnnotationApplication::Value::Builder builder) {
  return ::capnp::_::structString<Declaration::AnnotationApplication::Value>(builder._builder.asReader());
}

class Declaration::Param::Reader {
public:
  typedef Param Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline bool hasName() const;
  inline  ::capnp::compiler::LocatedText::Reader getName() const;

  inline bool hasType() const;
  inline  ::capnp::compiler::TypeExpression::Reader getType() const;

  inline bool hasAnnotations() const;
  inline  ::capnp::List< ::capnp::compiler::Declaration::AnnotationApplication>::Reader getAnnotations() const;

  inline DefaultValue::Reader getDefaultValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(Declaration::Param::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(Declaration::Param::Reader reader) {
  return ::capnp::_::structString<Declaration::Param>(reader._reader);
}

class Declaration::Param::Builder {
public:
  typedef Param Builds;

  Builder() = default;
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline bool hasName();
  inline  ::capnp::compiler::LocatedText::Builder getName();
  inline void setName( ::capnp::compiler::LocatedText::Reader value);
  inline  ::capnp::compiler::LocatedText::Builder initName();
  inline void adoptName(::capnp::Orphan< ::capnp::compiler::LocatedText>&& value);
  inline ::capnp::Orphan< ::capnp::compiler::LocatedText> disownName();

  inline bool hasType();
  inline  ::capnp::compiler::TypeExpression::Builder getType();
  inline void setType( ::capnp::compiler::TypeExpression::Reader value);
  inline  ::capnp::compiler::TypeExpression::Builder initType();
  inline void adoptType(::capnp::Orphan< ::capnp::compiler::TypeExpression>&& value);
  inline ::capnp::Orphan< ::capnp::compiler::TypeExpression> disownType();

  inline bool hasAnnotations();
  inline  ::capnp::List< ::capnp::compiler::Declaration::AnnotationApplication>::Builder getAnnotations();
  inline void setAnnotations( ::capnp::List< ::capnp::compiler::Declaration::AnnotationApplication>::Reader value);
  inline  ::capnp::List< ::capnp::compiler::Declaration::AnnotationApplication>::Builder initAnnotations(unsigned int size);
  inline void adoptAnnotations(::capnp::Orphan< ::capnp::List< ::capnp::compiler::Declaration::AnnotationApplication>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::compiler::Declaration::AnnotationApplication>> disownAnnotations();

  inline DefaultValue::Builder getDefaultValue();
  inline DefaultValue::Builder initDefaultValue();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(Declaration::Param::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(Declaration::Param::Builder builder) {
  return ::capnp::_::structString<Declaration::Param>(builder._builder.asReader());
}

class Declaration::Param::DefaultValue::Reader {
public:
  typedef DefaultValue Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline Which which() const;
  inline bool hasNone() const;
  inline  ::capnp::Void getNone() const;

  inline bool hasValue() const;
  inline  ::capnp::compiler::ValueExpression::Reader getValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(Declaration::Param::DefaultValue::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(Declaration::Param::DefaultValue::Reader reader) {
  return ::capnp::_::structString<Declaration::Param::DefaultValue>(reader._reader);
}

class Declaration::Param::DefaultValue::Builder {
public:
  typedef DefaultValue Builds;

  Builder() = default;
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline Which which();
  inline bool hasNone();
  inline  ::capnp::Void getNone();
  inline void setNone( ::capnp::Void value = ::capnp::Void::VOID);

  inline bool hasValue();
  inline  ::capnp::compiler::ValueExpression::Builder getValue();
  inline void setValue( ::capnp::compiler::ValueExpression::Reader value);
  inline  ::capnp::compiler::ValueExpression::Builder initValue();
  inline void adoptValue(::capnp::Orphan< ::capnp::compiler::ValueExpression>&& value);
  inline ::capnp::Orphan< ::capnp::compiler::ValueExpression> disownValue();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(Declaration::Param::DefaultValue::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(Declaration::Param::DefaultValue::Builder builder) {
  return ::capnp::_::structString<Declaration::Param::DefaultValue>(builder._builder.asReader());
}

class Declaration::Id::Reader {
public:
  typedef Id Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline Which which() const;
  inline bool hasUnspecified() const;
  inline  ::capnp::Void getUnspecified() const;

  inline bool hasUid() const;
  inline  ::capnp::compiler::LocatedInteger::Reader getUid() const;

  inline bool hasOrdinal() const;
  inline  ::capnp::compiler::LocatedInteger::Reader getOrdinal() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(Declaration::Id::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(Declaration::Id::Reader reader) {
  return ::capnp::_::structString<Declaration::Id>(reader._reader);
}

class Declaration::Id::Builder {
public:
  typedef Id Builds;

  Builder() = default;
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline Which which();
  inline bool hasUnspecified();
  inline  ::capnp::Void getUnspecified();
  inline void setUnspecified( ::capnp::Void value = ::capnp::Void::VOID);

  inline bool hasUid();
  inline  ::capnp::compiler::LocatedInteger::Builder getUid();
  inline void setUid( ::capnp::compiler::LocatedInteger::Reader value);
  inline  ::capnp::compiler::LocatedInteger::Builder initUid();
  inline void adoptUid(::capnp::Orphan< ::capnp::compiler::LocatedInteger>&& value);
  inline ::capnp::Orphan< ::capnp::compiler::LocatedInteger> disownUid();

  inline bool hasOrdinal();
  inline  ::capnp::compiler::LocatedInteger::Builder getOrdinal();
  inline void setOrdinal( ::capnp::compiler::LocatedInteger::Reader value);
  inline  ::capnp::compiler::LocatedInteger::Builder initOrdinal();
  inline void adoptOrdinal(::capnp::Orphan< ::capnp::compiler::LocatedInteger>&& value);
  inline ::capnp::Orphan< ::capnp::compiler::LocatedInteger> disownOrdinal();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(Declaration::Id::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(Declaration::Id::Builder builder) {
  return ::capnp::_::structString<Declaration::Id>(builder._builder.asReader());
}

class Declaration::Using::Reader {
public:
  typedef Using Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline bool hasTarget() const;
  inline  ::capnp::compiler::DeclName::Reader getTarget() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(Declaration::Using::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(Declaration::Using::Reader reader) {
  return ::capnp::_::structString<Declaration::Using>(reader._reader);
}

class Declaration::Using::Builder {
public:
  typedef Using Builds;

  Builder() = default;
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline bool hasTarget();
  inline  ::capnp::compiler::DeclName::Builder getTarget();
  inline void setTarget( ::capnp::compiler::DeclName::Reader value);
  inline  ::capnp::compiler::DeclName::Builder initTarget();
  inline void adoptTarget(::capnp::Orphan< ::capnp::compiler::DeclName>&& value);
  inline ::capnp::Orphan< ::capnp::compiler::DeclName> disownTarget();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(Declaration::Using::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(Declaration::Using::Builder builder) {
  return ::capnp::_::structString<Declaration::Using>(builder._builder.asReader());
}

class Declaration::Const::Reader {
public:
  typedef Const Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline bool hasType() const;
  inline  ::capnp::compiler::TypeExpression::Reader getType() const;

  inline bool hasValue() const;
  inline  ::capnp::compiler::ValueExpression::Reader getValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(Declaration::Const::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(Declaration::Const::Reader reader) {
  return ::capnp::_::structString<Declaration::Const>(reader._reader);
}

class Declaration::Const::Builder {
public:
  typedef Const Builds;

  Builder() = default;
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline bool hasType();
  inline  ::capnp::compiler::TypeExpression::Builder getType();
  inline void setType( ::capnp::compiler::TypeExpression::Reader value);
  inline  ::capnp::compiler::TypeExpression::Builder initType();
  inline void adoptType(::capnp::Orphan< ::capnp::compiler::TypeExpression>&& value);
  inline ::capnp::Orphan< ::capnp::compiler::TypeExpression> disownType();

  inline bool hasValue();
  inline  ::capnp::compiler::ValueExpression::Builder getValue();
  inline void setValue( ::capnp::compiler::ValueExpression::Reader value);
  inline  ::capnp::compiler::ValueExpression::Builder initValue();
  inline void adoptValue(::capnp::Orphan< ::capnp::compiler::ValueExpression>&& value);
  inline ::capnp::Orphan< ::capnp::compiler::ValueExpression> disownValue();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(Declaration::Const::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(Declaration::Const::Builder builder) {
  return ::capnp::_::structString<Declaration::Const>(builder._builder.asReader());
}

class Declaration::Field::Reader {
public:
  typedef Field Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline bool hasType() const;
  inline  ::capnp::compiler::TypeExpression::Reader getType() const;

  inline DefaultValue::Reader getDefaultValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(Declaration::Field::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(Declaration::Field::Reader reader) {
  return ::capnp::_::structString<Declaration::Field>(reader._reader);
}

class Declaration::Field::Builder {
public:
  typedef Field Builds;

  Builder() = default;
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline bool hasType();
  inline  ::capnp::compiler::TypeExpression::Builder getType();
  inline void setType( ::capnp::compiler::TypeExpression::Reader value);
  inline  ::capnp::compiler::TypeExpression::Builder initType();
  inline void adoptType(::capnp::Orphan< ::capnp::compiler::TypeExpression>&& value);
  inline ::capnp::Orphan< ::capnp::compiler::TypeExpression> disownType();

  inline DefaultValue::Builder getDefaultValue();
  inline DefaultValue::Builder initDefaultValue();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(Declaration::Field::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(Declaration::Field::Builder builder) {
  return ::capnp::_::structString<Declaration::Field>(builder._builder.asReader());
}

class Declaration::Field::DefaultValue::Reader {
public:
  typedef DefaultValue Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline Which which() const;
  inline bool hasNone() const;
  inline  ::capnp::Void getNone() const;

  inline bool hasValue() const;
  inline  ::capnp::compiler::ValueExpression::Reader getValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(Declaration::Field::DefaultValue::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(Declaration::Field::DefaultValue::Reader reader) {
  return ::capnp::_::structString<Declaration::Field::DefaultValue>(reader._reader);
}

class Declaration::Field::DefaultValue::Builder {
public:
  typedef DefaultValue Builds;

  Builder() = default;
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline Which which();
  inline bool hasNone();
  inline  ::capnp::Void getNone();
  inline void setNone( ::capnp::Void value = ::capnp::Void::VOID);

  inline bool hasValue();
  inline  ::capnp::compiler::ValueExpression::Builder getValue();
  inline void setValue( ::capnp::compiler::ValueExpression::Reader value);
  inline  ::capnp::compiler::ValueExpression::Builder initValue();
  inline void adoptValue(::capnp::Orphan< ::capnp::compiler::ValueExpression>&& value);
  inline ::capnp::Orphan< ::capnp::compiler::ValueExpression> disownValue();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(Declaration::Field::DefaultValue::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(Declaration::Field::DefaultValue::Builder builder) {
  return ::capnp::_::structString<Declaration::Field::DefaultValue>(builder._builder.asReader());
}

class Declaration::Method::Reader {
public:
  typedef Method Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline bool hasParams() const;
  inline  ::capnp::List< ::capnp::compiler::Declaration::Param>::Reader getParams() const;

  inline ReturnType::Reader getReturnType() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(Declaration::Method::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(Declaration::Method::Reader reader) {
  return ::capnp::_::structString<Declaration::Method>(reader._reader);
}

class Declaration::Method::Builder {
public:
  typedef Method Builds;

  Builder() = default;
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline bool hasParams();
  inline  ::capnp::List< ::capnp::compiler::Declaration::Param>::Builder getParams();
  inline void setParams( ::capnp::List< ::capnp::compiler::Declaration::Param>::Reader value);
  inline  ::capnp::List< ::capnp::compiler::Declaration::Param>::Builder initParams(unsigned int size);
  inline void adoptParams(::capnp::Orphan< ::capnp::List< ::capnp::compiler::Declaration::Param>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::compiler::Declaration::Param>> disownParams();

  inline ReturnType::Builder getReturnType();
  inline ReturnType::Builder initReturnType();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(Declaration::Method::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(Declaration::Method::Builder builder) {
  return ::capnp::_::structString<Declaration::Method>(builder._builder.asReader());
}

class Declaration::Method::ReturnType::Reader {
public:
  typedef ReturnType Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline Which which() const;
  inline bool hasNone() const;
  inline  ::capnp::Void getNone() const;

  inline bool hasExpression() const;
  inline  ::capnp::compiler::TypeExpression::Reader getExpression() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(Declaration::Method::ReturnType::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(Declaration::Method::ReturnType::Reader reader) {
  return ::capnp::_::structString<Declaration::Method::ReturnType>(reader._reader);
}

class Declaration::Method::ReturnType::Builder {
public:
  typedef ReturnType Builds;

  Builder() = default;
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline Which which();
  inline bool hasNone();
  inline  ::capnp::Void getNone();
  inline void setNone( ::capnp::Void value = ::capnp::Void::VOID);

  inline bool hasExpression();
  inline  ::capnp::compiler::TypeExpression::Builder getExpression();
  inline void setExpression( ::capnp::compiler::TypeExpression::Reader value);
  inline  ::capnp::compiler::TypeExpression::Builder initExpression();
  inline void adoptExpression(::capnp::Orphan< ::capnp::compiler::TypeExpression>&& value);
  inline ::capnp::Orphan< ::capnp::compiler::TypeExpression> disownExpression();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(Declaration::Method::ReturnType::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(Declaration::Method::ReturnType::Builder builder) {
  return ::capnp::_::structString<Declaration::Method::ReturnType>(builder._builder.asReader());
}

class Declaration::Annotation::Reader {
public:
  typedef Annotation Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline bool hasType() const;
  inline  ::capnp::compiler::TypeExpression::Reader getType() const;

  inline bool hasTargetsFile() const;
  inline bool getTargetsFile() const;

  inline bool hasTargetsConst() const;
  inline bool getTargetsConst() const;

  inline bool hasTargetsEnum() const;
  inline bool getTargetsEnum() const;

  inline bool hasTargetsEnumerant() const;
  inline bool getTargetsEnumerant() const;

  inline bool hasTargetsStruct() const;
  inline bool getTargetsStruct() const;

  inline bool hasTargetsField() const;
  inline bool getTargetsField() const;

  inline bool hasTargetsUnion() const;
  inline bool getTargetsUnion() const;

  inline bool hasTargetsGroup() const;
  inline bool getTargetsGroup() const;

  inline bool hasTargetsInterface() const;
  inline bool getTargetsInterface() const;

  inline bool hasTargetsMethod() const;
  inline bool getTargetsMethod() const;

  inline bool hasTargetsParam() const;
  inline bool getTargetsParam() const;

  inline bool hasTargetsAnnotation() const;
  inline bool getTargetsAnnotation() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(Declaration::Annotation::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(Declaration::Annotation::Reader reader) {
  return ::capnp::_::structString<Declaration::Annotation>(reader._reader);
}

class Declaration::Annotation::Builder {
public:
  typedef Annotation Builds;

  Builder() = default;
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline bool hasType();
  inline  ::capnp::compiler::TypeExpression::Builder getType();
  inline void setType( ::capnp::compiler::TypeExpression::Reader value);
  inline  ::capnp::compiler::TypeExpression::Builder initType();
  inline void adoptType(::capnp::Orphan< ::capnp::compiler::TypeExpression>&& value);
  inline ::capnp::Orphan< ::capnp::compiler::TypeExpression> disownType();

  inline bool hasTargetsFile();
  inline bool getTargetsFile();
  inline void setTargetsFile(bool value);

  inline bool hasTargetsConst();
  inline bool getTargetsConst();
  inline void setTargetsConst(bool value);

  inline bool hasTargetsEnum();
  inline bool getTargetsEnum();
  inline void setTargetsEnum(bool value);

  inline bool hasTargetsEnumerant();
  inline bool getTargetsEnumerant();
  inline void setTargetsEnumerant(bool value);

  inline bool hasTargetsStruct();
  inline bool getTargetsStruct();
  inline void setTargetsStruct(bool value);

  inline bool hasTargetsField();
  inline bool getTargetsField();
  inline void setTargetsField(bool value);

  inline bool hasTargetsUnion();
  inline bool getTargetsUnion();
  inline void setTargetsUnion(bool value);

  inline bool hasTargetsGroup();
  inline bool getTargetsGroup();
  inline void setTargetsGroup(bool value);

  inline bool hasTargetsInterface();
  inline bool getTargetsInterface();
  inline void setTargetsInterface(bool value);

  inline bool hasTargetsMethod();
  inline bool getTargetsMethod();
  inline void setTargetsMethod(bool value);

  inline bool hasTargetsParam();
  inline bool getTargetsParam();
  inline void setTargetsParam(bool value);

  inline bool hasTargetsAnnotation();
  inline bool getTargetsAnnotation();
  inline void setTargetsAnnotation(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(Declaration::Annotation::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(Declaration::Annotation::Builder builder) {
  return ::capnp::_::structString<Declaration::Annotation>(builder._builder.asReader());
}

class ParsedFile::Reader {
public:
  typedef ParsedFile Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline bool hasRoot() const;
  inline  ::capnp::compiler::Declaration::Reader getRoot() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(ParsedFile::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(ParsedFile::Reader reader) {
  return ::capnp::_::structString<ParsedFile>(reader._reader);
}

class ParsedFile::Builder {
public:
  typedef ParsedFile Builds;

  Builder() = default;
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline bool hasRoot();
  inline  ::capnp::compiler::Declaration::Builder getRoot();
  inline void setRoot( ::capnp::compiler::Declaration::Reader value);
  inline  ::capnp::compiler::Declaration::Builder initRoot();
  inline void adoptRoot(::capnp::Orphan< ::capnp::compiler::Declaration>&& value);
  inline ::capnp::Orphan< ::capnp::compiler::Declaration> disownRoot();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(ParsedFile::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(ParsedFile::Builder builder) {
  return ::capnp::_::structString<ParsedFile>(builder._builder.asReader());
}

// =======================================================================================

inline bool LocatedText::Reader::hasValue() const {
  return !_reader.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline bool LocatedText::Builder::hasValue() {
  return !_builder.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Reader LocatedText::Reader::getValue() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader, 0 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Builder LocatedText::Builder::getValue() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder, 0 * ::capnp::POINTERS);
}
inline void LocatedText::Builder::setValue( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder, 0 * ::capnp::POINTERS, value);
}
inline  ::capnp::Text::Builder LocatedText::Builder::initValue(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder, 0 * ::capnp::POINTERS, size);
}
inline void LocatedText::Builder::adoptValue(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder, 0 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> LocatedText::Builder::disownValue() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder, 0 * ::capnp::POINTERS);
}

inline bool LocatedText::Reader::hasStartByte() const {
  return _reader.hasDataField< ::uint32_t>(0 * ::capnp::ELEMENTS);
}

inline bool LocatedText::Builder::hasStartByte() {
  return _builder.hasDataField< ::uint32_t>(0 * ::capnp::ELEMENTS);
}
inline  ::uint32_t LocatedText::Reader::getStartByte() const {
  return _reader.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint32_t LocatedText::Builder::getStartByte() {
  return _builder.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void LocatedText::Builder::setStartByte( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool LocatedText::Reader::hasEndByte() const {
  return _reader.hasDataField< ::uint32_t>(1 * ::capnp::ELEMENTS);
}

inline bool LocatedText::Builder::hasEndByte() {
  return _builder.hasDataField< ::uint32_t>(1 * ::capnp::ELEMENTS);
}
inline  ::uint32_t LocatedText::Reader::getEndByte() const {
  return _reader.getDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint32_t LocatedText::Builder::getEndByte() {
  return _builder.getDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS);
}
inline void LocatedText::Builder::setEndByte( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool LocatedInteger::Reader::hasValue() const {
  return _reader.hasDataField< ::uint64_t>(0 * ::capnp::ELEMENTS);
}

inline bool LocatedInteger::Builder::hasValue() {
  return _builder.hasDataField< ::uint64_t>(0 * ::capnp::ELEMENTS);
}
inline  ::uint64_t LocatedInteger::Reader::getValue() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t LocatedInteger::Builder::getValue() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void LocatedInteger::Builder::setValue( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool LocatedInteger::Reader::hasStartByte() const {
  return _reader.hasDataField< ::uint32_t>(2 * ::capnp::ELEMENTS);
}

inline bool LocatedInteger::Builder::hasStartByte() {
  return _builder.hasDataField< ::uint32_t>(2 * ::capnp::ELEMENTS);
}
inline  ::uint32_t LocatedInteger::Reader::getStartByte() const {
  return _reader.getDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint32_t LocatedInteger::Builder::getStartByte() {
  return _builder.getDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS);
}
inline void LocatedInteger::Builder::setStartByte( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline bool LocatedInteger::Reader::hasEndByte() const {
  return _reader.hasDataField< ::uint32_t>(3 * ::capnp::ELEMENTS);
}

inline bool LocatedInteger::Builder::hasEndByte() {
  return _builder.hasDataField< ::uint32_t>(3 * ::capnp::ELEMENTS);
}
inline  ::uint32_t LocatedInteger::Reader::getEndByte() const {
  return _reader.getDataField< ::uint32_t>(
      3 * ::capnp::ELEMENTS);
}

inline  ::uint32_t LocatedInteger::Builder::getEndByte() {
  return _builder.getDataField< ::uint32_t>(
      3 * ::capnp::ELEMENTS);
}
inline void LocatedInteger::Builder::setEndByte( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      3 * ::capnp::ELEMENTS, value);
}

inline bool LocatedFloat::Reader::hasValue() const {
  return _reader.hasDataField<double>(0 * ::capnp::ELEMENTS);
}

inline bool LocatedFloat::Builder::hasValue() {
  return _builder.hasDataField<double>(0 * ::capnp::ELEMENTS);
}
inline double LocatedFloat::Reader::getValue() const {
  return _reader.getDataField<double>(
      0 * ::capnp::ELEMENTS);
}

inline double LocatedFloat::Builder::getValue() {
  return _builder.getDataField<double>(
      0 * ::capnp::ELEMENTS);
}
inline void LocatedFloat::Builder::setValue(double value) {
  _builder.setDataField<double>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool LocatedFloat::Reader::hasStartByte() const {
  return _reader.hasDataField< ::uint32_t>(2 * ::capnp::ELEMENTS);
}

inline bool LocatedFloat::Builder::hasStartByte() {
  return _builder.hasDataField< ::uint32_t>(2 * ::capnp::ELEMENTS);
}
inline  ::uint32_t LocatedFloat::Reader::getStartByte() const {
  return _reader.getDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint32_t LocatedFloat::Builder::getStartByte() {
  return _builder.getDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS);
}
inline void LocatedFloat::Builder::setStartByte( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline bool LocatedFloat::Reader::hasEndByte() const {
  return _reader.hasDataField< ::uint32_t>(3 * ::capnp::ELEMENTS);
}

inline bool LocatedFloat::Builder::hasEndByte() {
  return _builder.hasDataField< ::uint32_t>(3 * ::capnp::ELEMENTS);
}
inline  ::uint32_t LocatedFloat::Reader::getEndByte() const {
  return _reader.getDataField< ::uint32_t>(
      3 * ::capnp::ELEMENTS);
}

inline  ::uint32_t LocatedFloat::Builder::getEndByte() {
  return _builder.getDataField< ::uint32_t>(
      3 * ::capnp::ELEMENTS);
}
inline void LocatedFloat::Builder::setEndByte( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      3 * ::capnp::ELEMENTS, value);
}

inline DeclName::Base::Reader DeclName::Reader::getBase() const {
  return DeclName::Base::Reader(_reader);
}
inline DeclName::Base::Builder DeclName::Builder::getBase() {
  return DeclName::Base::Builder(_builder);
}
inline DeclName::Base::Builder DeclName::Builder::initBase() {
  _builder.setDataField< ::uint16_t>(0 * ::capnp::ELEMENTS, 0);
  _builder.clearPointer(0 * ::capnp::POINTERS);
  return DeclName::Base::Builder(_builder);
}
inline bool DeclName::Reader::hasMemberPath() const {
  return !_reader.isPointerFieldNull(1 * ::capnp::POINTERS);
}
inline bool DeclName::Builder::hasMemberPath() {
  return !_builder.isPointerFieldNull(1 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::capnp::compiler::LocatedText>::Reader DeclName::Reader::getMemberPath() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::compiler::LocatedText>>::get(
      _reader, 1 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::capnp::compiler::LocatedText>::Builder DeclName::Builder::getMemberPath() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::compiler::LocatedText>>::get(
      _builder, 1 * ::capnp::POINTERS);
}
inline void DeclName::Builder::setMemberPath( ::capnp::List< ::capnp::compiler::LocatedText>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::compiler::LocatedText>>::set(
      _builder, 1 * ::capnp::POINTERS, value);
}
inline  ::capnp::List< ::capnp::compiler::LocatedText>::Builder DeclName::Builder::initMemberPath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::compiler::LocatedText>>::init(
      _builder, 1 * ::capnp::POINTERS, size);
}
inline void DeclName::Builder::adoptMemberPath(
    ::capnp::Orphan< ::capnp::List< ::capnp::compiler::LocatedText>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::compiler::LocatedText>>::adopt(
      _builder, 1 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::compiler::LocatedText>> DeclName::Builder::disownMemberPath() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::compiler::LocatedText>>::disown(
      _builder, 1 * ::capnp::POINTERS);
}

inline bool DeclName::Reader::hasStartByte() const {
  return _reader.hasDataField< ::uint32_t>(1 * ::capnp::ELEMENTS);
}

inline bool DeclName::Builder::hasStartByte() {
  return _builder.hasDataField< ::uint32_t>(1 * ::capnp::ELEMENTS);
}
inline  ::uint32_t DeclName::Reader::getStartByte() const {
  return _reader.getDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint32_t DeclName::Builder::getStartByte() {
  return _builder.getDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS);
}
inline void DeclName::Builder::setStartByte( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool DeclName::Reader::hasEndByte() const {
  return _reader.hasDataField< ::uint32_t>(2 * ::capnp::ELEMENTS);
}

inline bool DeclName::Builder::hasEndByte() {
  return _builder.hasDataField< ::uint32_t>(2 * ::capnp::ELEMENTS);
}
inline  ::uint32_t DeclName::Reader::getEndByte() const {
  return _reader.getDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint32_t DeclName::Builder::getEndByte() {
  return _builder.getDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS);
}
inline void DeclName::Builder::setEndByte( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline DeclName::Base::Which DeclName::Base::Reader::which() const {
  return _reader.getDataField<Which>(0 * ::capnp::ELEMENTS);
}
inline DeclName::Base::Which DeclName::Base::Builder::which() {
  return _builder.getDataField<Which>(0 * ::capnp::ELEMENTS);
}

inline bool DeclName::Base::Reader::hasAbsoluteName() const {
  KJ_IREQUIRE(which() == DeclName::Base::ABSOLUTE_NAME,
              "Must check which() before get()ing a union member.");
  return !_reader.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline bool DeclName::Base::Builder::hasAbsoluteName() {
  KJ_IREQUIRE(which() == DeclName::Base::ABSOLUTE_NAME,
              "Must check which() before get()ing a union member.");
  return !_builder.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline  ::capnp::compiler::LocatedText::Reader DeclName::Base::Reader::getAbsoluteName() const {
  KJ_IREQUIRE(which() == DeclName::Base::ABSOLUTE_NAME,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::compiler::LocatedText>::get(
      _reader, 0 * ::capnp::POINTERS);
}
inline  ::capnp::compiler::LocatedText::Builder DeclName::Base::Builder::getAbsoluteName() {
  KJ_IREQUIRE(which() == DeclName::Base::ABSOLUTE_NAME,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::compiler::LocatedText>::get(
      _builder, 0 * ::capnp::POINTERS);
}
inline void DeclName::Base::Builder::setAbsoluteName( ::capnp::compiler::LocatedText::Reader value) {
  _builder.setDataField<DeclName::Base::Which>(
      0 * ::capnp::ELEMENTS, DeclName::Base::ABSOLUTE_NAME);
  ::capnp::_::PointerHelpers< ::capnp::compiler::LocatedText>::set(
      _builder, 0 * ::capnp::POINTERS, value);
}
inline  ::capnp::compiler::LocatedText::Builder DeclName::Base::Builder::initAbsoluteName() {
  _builder.setDataField<DeclName::Base::Which>(
      0 * ::capnp::ELEMENTS, DeclName::Base::ABSOLUTE_NAME);
  return ::capnp::_::PointerHelpers< ::capnp::compiler::LocatedText>::init(
      _builder, 0 * ::capnp::POINTERS);
}
inline void DeclName::Base::Builder::adoptAbsoluteName(
    ::capnp::Orphan< ::capnp::compiler::LocatedText>&& value) {
  _builder.setDataField<DeclName::Base::Which>(
      0 * ::capnp::ELEMENTS, DeclName::Base::ABSOLUTE_NAME);
  ::capnp::_::PointerHelpers< ::capnp::compiler::LocatedText>::adopt(
      _builder, 0 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::compiler::LocatedText> DeclName::Base::Builder::disownAbsoluteName() {
  KJ_IREQUIRE(which() == DeclName::Base::ABSOLUTE_NAME,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::compiler::LocatedText>::disown(
      _builder, 0 * ::capnp::POINTERS);
}

inline bool DeclName::Base::Reader::hasRelativeName() const {
  KJ_IREQUIRE(which() == DeclName::Base::RELATIVE_NAME,
              "Must check which() before get()ing a union member.");
  return !_reader.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline bool DeclName::Base::Builder::hasRelativeName() {
  KJ_IREQUIRE(which() == DeclName::Base::RELATIVE_NAME,
              "Must check which() before get()ing a union member.");
  return !_builder.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline  ::capnp::compiler::LocatedText::Reader DeclName::Base::Reader::getRelativeName() const {
  KJ_IREQUIRE(which() == DeclName::Base::RELATIVE_NAME,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::compiler::LocatedText>::get(
      _reader, 0 * ::capnp::POINTERS);
}
inline  ::capnp::compiler::LocatedText::Builder DeclName::Base::Builder::getRelativeName() {
  KJ_IREQUIRE(which() == DeclName::Base::RELATIVE_NAME,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::compiler::LocatedText>::get(
      _builder, 0 * ::capnp::POINTERS);
}
inline void DeclName::Base::Builder::setRelativeName( ::capnp::compiler::LocatedText::Reader value) {
  _builder.setDataField<DeclName::Base::Which>(
      0 * ::capnp::ELEMENTS, DeclName::Base::RELATIVE_NAME);
  ::capnp::_::PointerHelpers< ::capnp::compiler::LocatedText>::set(
      _builder, 0 * ::capnp::POINTERS, value);
}
inline  ::capnp::compiler::LocatedText::Builder DeclName::Base::Builder::initRelativeName() {
  _builder.setDataField<DeclName::Base::Which>(
      0 * ::capnp::ELEMENTS, DeclName::Base::RELATIVE_NAME);
  return ::capnp::_::PointerHelpers< ::capnp::compiler::LocatedText>::init(
      _builder, 0 * ::capnp::POINTERS);
}
inline void DeclName::Base::Builder::adoptRelativeName(
    ::capnp::Orphan< ::capnp::compiler::LocatedText>&& value) {
  _builder.setDataField<DeclName::Base::Which>(
      0 * ::capnp::ELEMENTS, DeclName::Base::RELATIVE_NAME);
  ::capnp::_::PointerHelpers< ::capnp::compiler::LocatedText>::adopt(
      _builder, 0 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::compiler::LocatedText> DeclName::Base::Builder::disownRelativeName() {
  KJ_IREQUIRE(which() == DeclName::Base::RELATIVE_NAME,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::compiler::LocatedText>::disown(
      _builder, 0 * ::capnp::POINTERS);
}

inline bool DeclName::Base::Reader::hasImportName() const {
  KJ_IREQUIRE(which() == DeclName::Base::IMPORT_NAME,
              "Must check which() before get()ing a union member.");
  return !_reader.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline bool DeclName::Base::Builder::hasImportName() {
  KJ_IREQUIRE(which() == DeclName::Base::IMPORT_NAME,
              "Must check which() before get()ing a union member.");
  return !_builder.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline  ::capnp::compiler::LocatedText::Reader DeclName::Base::Reader::getImportName() const {
  KJ_IREQUIRE(which() == DeclName::Base::IMPORT_NAME,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::compiler::LocatedText>::get(
      _reader, 0 * ::capnp::POINTERS);
}
inline  ::capnp::compiler::LocatedText::Builder DeclName::Base::Builder::getImportName() {
  KJ_IREQUIRE(which() == DeclName::Base::IMPORT_NAME,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::compiler::LocatedText>::get(
      _builder, 0 * ::capnp::POINTERS);
}
inline void DeclName::Base::Builder::setImportName( ::capnp::compiler::LocatedText::Reader value) {
  _builder.setDataField<DeclName::Base::Which>(
      0 * ::capnp::ELEMENTS, DeclName::Base::IMPORT_NAME);
  ::capnp::_::PointerHelpers< ::capnp::compiler::LocatedText>::set(
      _builder, 0 * ::capnp::POINTERS, value);
}
inline  ::capnp::compiler::LocatedText::Builder DeclName::Base::Builder::initImportName() {
  _builder.setDataField<DeclName::Base::Which>(
      0 * ::capnp::ELEMENTS, DeclName::Base::IMPORT_NAME);
  return ::capnp::_::PointerHelpers< ::capnp::compiler::LocatedText>::init(
      _builder, 0 * ::capnp::POINTERS);
}
inline void DeclName::Base::Builder::adoptImportName(
    ::capnp::Orphan< ::capnp::compiler::LocatedText>&& value) {
  _builder.setDataField<DeclName::Base::Which>(
      0 * ::capnp::ELEMENTS, DeclName::Base::IMPORT_NAME);
  ::capnp::_::PointerHelpers< ::capnp::compiler::LocatedText>::adopt(
      _builder, 0 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::compiler::LocatedText> DeclName::Base::Builder::disownImportName() {
  KJ_IREQUIRE(which() == DeclName::Base::IMPORT_NAME,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::compiler::LocatedText>::disown(
      _builder, 0 * ::capnp::POINTERS);
}

inline bool TypeExpression::Reader::hasName() const {
  return !_reader.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline bool TypeExpression::Builder::hasName() {
  return !_builder.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline  ::capnp::compiler::DeclName::Reader TypeExpression::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::compiler::DeclName>::get(
      _reader, 0 * ::capnp::POINTERS);
}
inline  ::capnp::compiler::DeclName::Builder TypeExpression::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::compiler::DeclName>::get(
      _builder, 0 * ::capnp::POINTERS);
}
inline void TypeExpression::Builder::setName( ::capnp::compiler::DeclName::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::compiler::DeclName>::set(
      _builder, 0 * ::capnp::POINTERS, value);
}
inline  ::capnp::compiler::DeclName::Builder TypeExpression::Builder::initName() {
  return ::capnp::_::PointerHelpers< ::capnp::compiler::DeclName>::init(
      _builder, 0 * ::capnp::POINTERS);
}
inline void TypeExpression::Builder::adoptName(
    ::capnp::Orphan< ::capnp::compiler::DeclName>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::compiler::DeclName>::adopt(
      _builder, 0 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::compiler::DeclName> TypeExpression::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::compiler::DeclName>::disown(
      _builder, 0 * ::capnp::POINTERS);
}

inline bool TypeExpression::Reader::hasParams() const {
  return !_reader.isPointerFieldNull(1 * ::capnp::POINTERS);
}
inline bool TypeExpression::Builder::hasParams() {
  return !_builder.isPointerFieldNull(1 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::capnp::compiler::TypeExpression>::Reader TypeExpression::Reader::getParams() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::compiler::TypeExpression>>::get(
      _reader, 1 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::capnp::compiler::TypeExpression>::Builder TypeExpression::Builder::getParams() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::compiler::TypeExpression>>::get(
      _builder, 1 * ::capnp::POINTERS);
}
inline void TypeExpression::Builder::setParams( ::capnp::List< ::capnp::compiler::TypeExpression>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::compiler::TypeExpression>>::set(
      _builder, 1 * ::capnp::POINTERS, value);
}
inline  ::capnp::List< ::capnp::compiler::TypeExpression>::Builder TypeExpression::Builder::initParams(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::compiler::TypeExpression>>::init(
      _builder, 1 * ::capnp::POINTERS, size);
}
inline void TypeExpression::Builder::adoptParams(
    ::capnp::Orphan< ::capnp::List< ::capnp::compiler::TypeExpression>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::compiler::TypeExpression>>::adopt(
      _builder, 1 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::compiler::TypeExpression>> TypeExpression::Builder::disownParams() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::compiler::TypeExpression>>::disown(
      _builder, 1 * ::capnp::POINTERS);
}

inline bool TypeExpression::Reader::hasStartByte() const {
  return _reader.hasDataField< ::uint32_t>(0 * ::capnp::ELEMENTS);
}

inline bool TypeExpression::Builder::hasStartByte() {
  return _builder.hasDataField< ::uint32_t>(0 * ::capnp::ELEMENTS);
}
inline  ::uint32_t TypeExpression::Reader::getStartByte() const {
  return _reader.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint32_t TypeExpression::Builder::getStartByte() {
  return _builder.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void TypeExpression::Builder::setStartByte( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool TypeExpression::Reader::hasEndByte() const {
  return _reader.hasDataField< ::uint32_t>(1 * ::capnp::ELEMENTS);
}

inline bool TypeExpression::Builder::hasEndByte() {
  return _builder.hasDataField< ::uint32_t>(1 * ::capnp::ELEMENTS);
}
inline  ::uint32_t TypeExpression::Reader::getEndByte() const {
  return _reader.getDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint32_t TypeExpression::Builder::getEndByte() {
  return _builder.getDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS);
}
inline void TypeExpression::Builder::setEndByte( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline ValueExpression::Which ValueExpression::Reader::which() const {
  return _reader.getDataField<Which>(0 * ::capnp::ELEMENTS);
}
inline ValueExpression::Which ValueExpression::Builder::which() {
  return _builder.getDataField<Which>(0 * ::capnp::ELEMENTS);
}

inline bool ValueExpression::Reader::hasUnknown() const {
  KJ_IREQUIRE(which() == ValueExpression::UNKNOWN,
              "Must check which() before get()ing a union member.");
  return _reader.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}

inline bool ValueExpression::Builder::hasUnknown() {
  KJ_IREQUIRE(which() == ValueExpression::UNKNOWN,
              "Must check which() before get()ing a union member.");
  return _builder.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}
inline  ::capnp::Void ValueExpression::Reader::getUnknown() const {
  KJ_IREQUIRE(which() == ValueExpression::UNKNOWN,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void ValueExpression::Builder::getUnknown() {
  KJ_IREQUIRE(which() == ValueExpression::UNKNOWN,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void ValueExpression::Builder::setUnknown( ::capnp::Void value) {
  _builder.setDataField<ValueExpression::Which>(
      0 * ::capnp::ELEMENTS, ValueExpression::UNKNOWN);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool ValueExpression::Reader::hasPositiveInt() const {
  KJ_IREQUIRE(which() == ValueExpression::POSITIVE_INT,
              "Must check which() before get()ing a union member.");
  return _reader.hasDataField< ::uint64_t>(1 * ::capnp::ELEMENTS);
}

inline bool ValueExpression::Builder::hasPositiveInt() {
  KJ_IREQUIRE(which() == ValueExpression::POSITIVE_INT,
              "Must check which() before get()ing a union member.");
  return _builder.hasDataField< ::uint64_t>(1 * ::capnp::ELEMENTS);
}
inline  ::uint64_t ValueExpression::Reader::getPositiveInt() const {
  KJ_IREQUIRE(which() == ValueExpression::POSITIVE_INT,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t ValueExpression::Builder::getPositiveInt() {
  KJ_IREQUIRE(which() == ValueExpression::POSITIVE_INT,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void ValueExpression::Builder::setPositiveInt( ::uint64_t value) {
  _builder.setDataField<ValueExpression::Which>(
      0 * ::capnp::ELEMENTS, ValueExpression::POSITIVE_INT);
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool ValueExpression::Reader::hasNegativeInt() const {
  KJ_IREQUIRE(which() == ValueExpression::NEGATIVE_INT,
              "Must check which() before get()ing a union member.");
  return _reader.hasDataField< ::uint64_t>(1 * ::capnp::ELEMENTS);
}

inline bool ValueExpression::Builder::hasNegativeInt() {
  KJ_IREQUIRE(which() == ValueExpression::NEGATIVE_INT,
              "Must check which() before get()ing a union member.");
  return _builder.hasDataField< ::uint64_t>(1 * ::capnp::ELEMENTS);
}
inline  ::uint64_t ValueExpression::Reader::getNegativeInt() const {
  KJ_IREQUIRE(which() == ValueExpression::NEGATIVE_INT,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t ValueExpression::Builder::getNegativeInt() {
  KJ_IREQUIRE(which() == ValueExpression::NEGATIVE_INT,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void ValueExpression::Builder::setNegativeInt( ::uint64_t value) {
  _builder.setDataField<ValueExpression::Which>(
      0 * ::capnp::ELEMENTS, ValueExpression::NEGATIVE_INT);
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool ValueExpression::Reader::hasFloat() const {
  KJ_IREQUIRE(which() == ValueExpression::FLOAT,
              "Must check which() before get()ing a union member.");
  return _reader.hasDataField<double>(1 * ::capnp::ELEMENTS);
}

inline bool ValueExpression::Builder::hasFloat() {
  KJ_IREQUIRE(which() == ValueExpression::FLOAT,
              "Must check which() before get()ing a union member.");
  return _builder.hasDataField<double>(1 * ::capnp::ELEMENTS);
}
inline double ValueExpression::Reader::getFloat() const {
  KJ_IREQUIRE(which() == ValueExpression::FLOAT,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField<double>(
      1 * ::capnp::ELEMENTS);
}

inline double ValueExpression::Builder::getFloat() {
  KJ_IREQUIRE(which() == ValueExpression::FLOAT,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField<double>(
      1 * ::capnp::ELEMENTS);
}
inline void ValueExpression::Builder::setFloat(double value) {
  _builder.setDataField<ValueExpression::Which>(
      0 * ::capnp::ELEMENTS, ValueExpression::FLOAT);
  _builder.setDataField<double>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool ValueExpression::Reader::hasString() const {
  KJ_IREQUIRE(which() == ValueExpression::STRING,
              "Must check which() before get()ing a union member.");
  return !_reader.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline bool ValueExpression::Builder::hasString() {
  KJ_IREQUIRE(which() == ValueExpression::STRING,
              "Must check which() before get()ing a union member.");
  return !_builder.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Reader ValueExpression::Reader::getString() const {
  KJ_IREQUIRE(which() == ValueExpression::STRING,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader, 0 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Builder ValueExpression::Builder::getString() {
  KJ_IREQUIRE(which() == ValueExpression::STRING,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder, 0 * ::capnp::POINTERS);
}
inline void ValueExpression::Builder::setString( ::capnp::Text::Reader value) {
  _builder.setDataField<ValueExpression::Which>(
      0 * ::capnp::ELEMENTS, ValueExpression::STRING);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder, 0 * ::capnp::POINTERS, value);
}
inline  ::capnp::Text::Builder ValueExpression::Builder::initString(unsigned int size) {
  _builder.setDataField<ValueExpression::Which>(
      0 * ::capnp::ELEMENTS, ValueExpression::STRING);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder, 0 * ::capnp::POINTERS, size);
}
inline void ValueExpression::Builder::adoptString(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<ValueExpression::Which>(
      0 * ::capnp::ELEMENTS, ValueExpression::STRING);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder, 0 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ValueExpression::Builder::disownString() {
  KJ_IREQUIRE(which() == ValueExpression::STRING,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder, 0 * ::capnp::POINTERS);
}

inline bool ValueExpression::Reader::hasName() const {
  KJ_IREQUIRE(which() == ValueExpression::NAME,
              "Must check which() before get()ing a union member.");
  return !_reader.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline bool ValueExpression::Builder::hasName() {
  KJ_IREQUIRE(which() == ValueExpression::NAME,
              "Must check which() before get()ing a union member.");
  return !_builder.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline  ::capnp::compiler::DeclName::Reader ValueExpression::Reader::getName() const {
  KJ_IREQUIRE(which() == ValueExpression::NAME,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::compiler::DeclName>::get(
      _reader, 0 * ::capnp::POINTERS);
}
inline  ::capnp::compiler::DeclName::Builder ValueExpression::Builder::getName() {
  KJ_IREQUIRE(which() == ValueExpression::NAME,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::compiler::DeclName>::get(
      _builder, 0 * ::capnp::POINTERS);
}
inline void ValueExpression::Builder::setName( ::capnp::compiler::DeclName::Reader value) {
  _builder.setDataField<ValueExpression::Which>(
      0 * ::capnp::ELEMENTS, ValueExpression::NAME);
  ::capnp::_::PointerHelpers< ::capnp::compiler::DeclName>::set(
      _builder, 0 * ::capnp::POINTERS, value);
}
inline  ::capnp::compiler::DeclName::Builder ValueExpression::Builder::initName() {
  _builder.setDataField<ValueExpression::Which>(
      0 * ::capnp::ELEMENTS, ValueExpression::NAME);
  return ::capnp::_::PointerHelpers< ::capnp::compiler::DeclName>::init(
      _builder, 0 * ::capnp::POINTERS);
}
inline void ValueExpression::Builder::adoptName(
    ::capnp::Orphan< ::capnp::compiler::DeclName>&& value) {
  _builder.setDataField<ValueExpression::Which>(
      0 * ::capnp::ELEMENTS, ValueExpression::NAME);
  ::capnp::_::PointerHelpers< ::capnp::compiler::DeclName>::adopt(
      _builder, 0 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::compiler::DeclName> ValueExpression::Builder::disownName() {
  KJ_IREQUIRE(which() == ValueExpression::NAME,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::compiler::DeclName>::disown(
      _builder, 0 * ::capnp::POINTERS);
}

inline bool ValueExpression::Reader::hasList() const {
  KJ_IREQUIRE(which() == ValueExpression::LIST,
              "Must check which() before get()ing a union member.");
  return !_reader.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline bool ValueExpression::Builder::hasList() {
  KJ_IREQUIRE(which() == ValueExpression::LIST,
              "Must check which() before get()ing a union member.");
  return !_builder.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::capnp::compiler::ValueExpression>::Reader ValueExpression::Reader::getList() const {
  KJ_IREQUIRE(which() == ValueExpression::LIST,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::compiler::ValueExpression>>::get(
      _reader, 0 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::capnp::compiler::ValueExpression>::Builder ValueExpression::Builder::getList() {
  KJ_IREQUIRE(which() == ValueExpression::LIST,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::compiler::ValueExpression>>::get(
      _builder, 0 * ::capnp::POINTERS);
}
inline void ValueExpression::Builder::setList( ::capnp::List< ::capnp::compiler::ValueExpression>::Reader value) {
  _builder.setDataField<ValueExpression::Which>(
      0 * ::capnp::ELEMENTS, ValueExpression::LIST);
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::compiler::ValueExpression>>::set(
      _builder, 0 * ::capnp::POINTERS, value);
}
inline  ::capnp::List< ::capnp::compiler::ValueExpression>::Builder ValueExpression::Builder::initList(unsigned int size) {
  _builder.setDataField<ValueExpression::Which>(
      0 * ::capnp::ELEMENTS, ValueExpression::LIST);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::compiler::ValueExpression>>::init(
      _builder, 0 * ::capnp::POINTERS, size);
}
inline void ValueExpression::Builder::adoptList(
    ::capnp::Orphan< ::capnp::List< ::capnp::compiler::ValueExpression>>&& value) {
  _builder.setDataField<ValueExpression::Which>(
      0 * ::capnp::ELEMENTS, ValueExpression::LIST);
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::compiler::ValueExpression>>::adopt(
      _builder, 0 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::compiler::ValueExpression>> ValueExpression::Builder::disownList() {
  KJ_IREQUIRE(which() == ValueExpression::LIST,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::compiler::ValueExpression>>::disown(
      _builder, 0 * ::capnp::POINTERS);
}

inline bool ValueExpression::Reader::hasStruct() const {
  KJ_IREQUIRE(which() == ValueExpression::STRUCT,
              "Must check which() before get()ing a union member.");
  return !_reader.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline bool ValueExpression::Builder::hasStruct() {
  KJ_IREQUIRE(which() == ValueExpression::STRUCT,
              "Must check which() before get()ing a union member.");
  return !_builder.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::capnp::compiler::ValueExpression::FieldAssignment>::Reader ValueExpression::Reader::getStruct() const {
  KJ_IREQUIRE(which() == ValueExpression::STRUCT,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::compiler::ValueExpression::FieldAssignment>>::get(
      _reader, 0 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::capnp::compiler::ValueExpression::FieldAssignment>::Builder ValueExpression::Builder::getStruct() {
  KJ_IREQUIRE(which() == ValueExpression::STRUCT,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::compiler::ValueExpression::FieldAssignment>>::get(
      _builder, 0 * ::capnp::POINTERS);
}
inline void ValueExpression::Builder::setStruct( ::capnp::List< ::capnp::compiler::ValueExpression::FieldAssignment>::Reader value) {
  _builder.setDataField<ValueExpression::Which>(
      0 * ::capnp::ELEMENTS, ValueExpression::STRUCT);
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::compiler::ValueExpression::FieldAssignment>>::set(
      _builder, 0 * ::capnp::POINTERS, value);
}
inline  ::capnp::List< ::capnp::compiler::ValueExpression::FieldAssignment>::Builder ValueExpression::Builder::initStruct(unsigned int size) {
  _builder.setDataField<ValueExpression::Which>(
      0 * ::capnp::ELEMENTS, ValueExpression::STRUCT);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::compiler::ValueExpression::FieldAssignment>>::init(
      _builder, 0 * ::capnp::POINTERS, size);
}
inline void ValueExpression::Builder::adoptStruct(
    ::capnp::Orphan< ::capnp::List< ::capnp::compiler::ValueExpression::FieldAssignment>>&& value) {
  _builder.setDataField<ValueExpression::Which>(
      0 * ::capnp::ELEMENTS, ValueExpression::STRUCT);
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::compiler::ValueExpression::FieldAssignment>>::adopt(
      _builder, 0 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::compiler::ValueExpression::FieldAssignment>> ValueExpression::Builder::disownStruct() {
  KJ_IREQUIRE(which() == ValueExpression::STRUCT,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::compiler::ValueExpression::FieldAssignment>>::disown(
      _builder, 0 * ::capnp::POINTERS);
}

inline bool ValueExpression::Reader::hasStartByte() const {
  return _reader.hasDataField< ::uint32_t>(1 * ::capnp::ELEMENTS);
}

inline bool ValueExpression::Builder::hasStartByte() {
  return _builder.hasDataField< ::uint32_t>(1 * ::capnp::ELEMENTS);
}
inline  ::uint32_t ValueExpression::Reader::getStartByte() const {
  return _reader.getDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint32_t ValueExpression::Builder::getStartByte() {
  return _builder.getDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS);
}
inline void ValueExpression::Builder::setStartByte( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool ValueExpression::Reader::hasEndByte() const {
  return _reader.hasDataField< ::uint32_t>(4 * ::capnp::ELEMENTS);
}

inline bool ValueExpression::Builder::hasEndByte() {
  return _builder.hasDataField< ::uint32_t>(4 * ::capnp::ELEMENTS);
}
inline  ::uint32_t ValueExpression::Reader::getEndByte() const {
  return _reader.getDataField< ::uint32_t>(
      4 * ::capnp::ELEMENTS);
}

inline  ::uint32_t ValueExpression::Builder::getEndByte() {
  return _builder.getDataField< ::uint32_t>(
      4 * ::capnp::ELEMENTS);
}
inline void ValueExpression::Builder::setEndByte( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      4 * ::capnp::ELEMENTS, value);
}

inline bool ValueExpression::FieldAssignment::Reader::hasFieldName() const {
  return !_reader.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline bool ValueExpression::FieldAssignment::Builder::hasFieldName() {
  return !_builder.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline  ::capnp::compiler::LocatedText::Reader ValueExpression::FieldAssignment::Reader::getFieldName() const {
  return ::capnp::_::PointerHelpers< ::capnp::compiler::LocatedText>::get(
      _reader, 0 * ::capnp::POINTERS);
}
inline  ::capnp::compiler::LocatedText::Builder ValueExpression::FieldAssignment::Builder::getFieldName() {
  return ::capnp::_::PointerHelpers< ::capnp::compiler::LocatedText>::get(
      _builder, 0 * ::capnp::POINTERS);
}
inline void ValueExpression::FieldAssignment::Builder::setFieldName( ::capnp::compiler::LocatedText::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::compiler::LocatedText>::set(
      _builder, 0 * ::capnp::POINTERS, value);
}
inline  ::capnp::compiler::LocatedText::Builder ValueExpression::FieldAssignment::Builder::initFieldName() {
  return ::capnp::_::PointerHelpers< ::capnp::compiler::LocatedText>::init(
      _builder, 0 * ::capnp::POINTERS);
}
inline void ValueExpression::FieldAssignment::Builder::adoptFieldName(
    ::capnp::Orphan< ::capnp::compiler::LocatedText>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::compiler::LocatedText>::adopt(
      _builder, 0 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::compiler::LocatedText> ValueExpression::FieldAssignment::Builder::disownFieldName() {
  return ::capnp::_::PointerHelpers< ::capnp::compiler::LocatedText>::disown(
      _builder, 0 * ::capnp::POINTERS);
}

inline bool ValueExpression::FieldAssignment::Reader::hasValue() const {
  return !_reader.isPointerFieldNull(1 * ::capnp::POINTERS);
}
inline bool ValueExpression::FieldAssignment::Builder::hasValue() {
  return !_builder.isPointerFieldNull(1 * ::capnp::POINTERS);
}
inline  ::capnp::compiler::ValueExpression::Reader ValueExpression::FieldAssignment::Reader::getValue() const {
  return ::capnp::_::PointerHelpers< ::capnp::compiler::ValueExpression>::get(
      _reader, 1 * ::capnp::POINTERS);
}
inline  ::capnp::compiler::ValueExpression::Builder ValueExpression::FieldAssignment::Builder::getValue() {
  return ::capnp::_::PointerHelpers< ::capnp::compiler::ValueExpression>::get(
      _builder, 1 * ::capnp::POINTERS);
}
inline void ValueExpression::FieldAssignment::Builder::setValue( ::capnp::compiler::ValueExpression::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::compiler::ValueExpression>::set(
      _builder, 1 * ::capnp::POINTERS, value);
}
inline  ::capnp::compiler::ValueExpression::Builder ValueExpression::FieldAssignment::Builder::initValue() {
  return ::capnp::_::PointerHelpers< ::capnp::compiler::ValueExpression>::init(
      _builder, 1 * ::capnp::POINTERS);
}
inline void ValueExpression::FieldAssignment::Builder::adoptValue(
    ::capnp::Orphan< ::capnp::compiler::ValueExpression>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::compiler::ValueExpression>::adopt(
      _builder, 1 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::compiler::ValueExpression> ValueExpression::FieldAssignment::Builder::disownValue() {
  return ::capnp::_::PointerHelpers< ::capnp::compiler::ValueExpression>::disown(
      _builder, 1 * ::capnp::POINTERS);
}

inline Declaration::Which Declaration::Reader::which() const {
  return _reader.getDataField<Which>(1 * ::capnp::ELEMENTS);
}
inline Declaration::Which Declaration::Builder::which() {
  return _builder.getDataField<Which>(1 * ::capnp::ELEMENTS);
}

inline bool Declaration::Reader::hasName() const {
  return !_reader.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline bool Declaration::Builder::hasName() {
  return !_builder.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline  ::capnp::compiler::LocatedText::Reader Declaration::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::compiler::LocatedText>::get(
      _reader, 0 * ::capnp::POINTERS);
}
inline  ::capnp::compiler::LocatedText::Builder Declaration::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::compiler::LocatedText>::get(
      _builder, 0 * ::capnp::POINTERS);
}
inline void Declaration::Builder::setName( ::capnp::compiler::LocatedText::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::compiler::LocatedText>::set(
      _builder, 0 * ::capnp::POINTERS, value);
}
inline  ::capnp::compiler::LocatedText::Builder Declaration::Builder::initName() {
  return ::capnp::_::PointerHelpers< ::capnp::compiler::LocatedText>::init(
      _builder, 0 * ::capnp::POINTERS);
}
inline void Declaration::Builder::adoptName(
    ::capnp::Orphan< ::capnp::compiler::LocatedText>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::compiler::LocatedText>::adopt(
      _builder, 0 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::compiler::LocatedText> Declaration::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::compiler::LocatedText>::disown(
      _builder, 0 * ::capnp::POINTERS);
}

inline Declaration::Id::Reader Declaration::Reader::getId() const {
  return Declaration::Id::Reader(_reader);
}
inline Declaration::Id::Builder Declaration::Builder::getId() {
  return Declaration::Id::Builder(_builder);
}
inline Declaration::Id::Builder Declaration::Builder::initId() {
  _builder.setDataField< ::uint16_t>(0 * ::capnp::ELEMENTS, 0);
  _builder.clearPointer(1 * ::capnp::POINTERS);
  return Declaration::Id::Builder(_builder);
}
inline bool Declaration::Reader::hasNestedDecls() const {
  return !_reader.isPointerFieldNull(2 * ::capnp::POINTERS);
}
inline bool Declaration::Builder::hasNestedDecls() {
  return !_builder.isPointerFieldNull(2 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::capnp::compiler::Declaration>::Reader Declaration::Reader::getNestedDecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::compiler::Declaration>>::get(
      _reader, 2 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::capnp::compiler::Declaration>::Builder Declaration::Builder::getNestedDecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::compiler::Declaration>>::get(
      _builder, 2 * ::capnp::POINTERS);
}
inline void Declaration::Builder::setNestedDecls( ::capnp::List< ::capnp::compiler::Declaration>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::compiler::Declaration>>::set(
      _builder, 2 * ::capnp::POINTERS, value);
}
inline  ::capnp::List< ::capnp::compiler::Declaration>::Builder Declaration::Builder::initNestedDecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::compiler::Declaration>>::init(
      _builder, 2 * ::capnp::POINTERS, size);
}
inline void Declaration::Builder::adoptNestedDecls(
    ::capnp::Orphan< ::capnp::List< ::capnp::compiler::Declaration>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::compiler::Declaration>>::adopt(
      _builder, 2 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::compiler::Declaration>> Declaration::Builder::disownNestedDecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::compiler::Declaration>>::disown(
      _builder, 2 * ::capnp::POINTERS);
}

inline bool Declaration::Reader::hasAnnotations() const {
  return !_reader.isPointerFieldNull(3 * ::capnp::POINTERS);
}
inline bool Declaration::Builder::hasAnnotations() {
  return !_builder.isPointerFieldNull(3 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::capnp::compiler::Declaration::AnnotationApplication>::Reader Declaration::Reader::getAnnotations() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::compiler::Declaration::AnnotationApplication>>::get(
      _reader, 3 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::capnp::compiler::Declaration::AnnotationApplication>::Builder Declaration::Builder::getAnnotations() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::compiler::Declaration::AnnotationApplication>>::get(
      _builder, 3 * ::capnp::POINTERS);
}
inline void Declaration::Builder::setAnnotations( ::capnp::List< ::capnp::compiler::Declaration::AnnotationApplication>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::compiler::Declaration::AnnotationApplication>>::set(
      _builder, 3 * ::capnp::POINTERS, value);
}
inline  ::capnp::List< ::capnp::compiler::Declaration::AnnotationApplication>::Builder Declaration::Builder::initAnnotations(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::compiler::Declaration::AnnotationApplication>>::init(
      _builder, 3 * ::capnp::POINTERS, size);
}
inline void Declaration::Builder::adoptAnnotations(
    ::capnp::Orphan< ::capnp::List< ::capnp::compiler::Declaration::AnnotationApplication>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::compiler::Declaration::AnnotationApplication>>::adopt(
      _builder, 3 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::compiler::Declaration::AnnotationApplication>> Declaration::Builder::disownAnnotations() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::compiler::Declaration::AnnotationApplication>>::disown(
      _builder, 3 * ::capnp::POINTERS);
}

inline bool Declaration::Reader::hasStartByte() const {
  return _reader.hasDataField< ::uint32_t>(1 * ::capnp::ELEMENTS);
}

inline bool Declaration::Builder::hasStartByte() {
  return _builder.hasDataField< ::uint32_t>(1 * ::capnp::ELEMENTS);
}
inline  ::uint32_t Declaration::Reader::getStartByte() const {
  return _reader.getDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Declaration::Builder::getStartByte() {
  return _builder.getDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Declaration::Builder::setStartByte( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool Declaration::Reader::hasEndByte() const {
  return _reader.hasDataField< ::uint32_t>(2 * ::capnp::ELEMENTS);
}

inline bool Declaration::Builder::hasEndByte() {
  return _builder.hasDataField< ::uint32_t>(2 * ::capnp::ELEMENTS);
}
inline  ::uint32_t Declaration::Reader::getEndByte() const {
  return _reader.getDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Declaration::Builder::getEndByte() {
  return _builder.getDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Declaration::Builder::setEndByte( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline bool Declaration::Reader::hasDocComment() const {
  return !_reader.isPointerFieldNull(4 * ::capnp::POINTERS);
}
inline bool Declaration::Builder::hasDocComment() {
  return !_builder.isPointerFieldNull(4 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Reader Declaration::Reader::getDocComment() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader, 4 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Builder Declaration::Builder::getDocComment() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder, 4 * ::capnp::POINTERS);
}
inline void Declaration::Builder::setDocComment( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder, 4 * ::capnp::POINTERS, value);
}
inline  ::capnp::Text::Builder Declaration::Builder::initDocComment(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder, 4 * ::capnp::POINTERS, size);
}
inline void Declaration::Builder::adoptDocComment(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder, 4 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Declaration::Builder::disownDocComment() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder, 4 * ::capnp::POINTERS);
}

inline bool Declaration::Reader::hasFile() const {
  KJ_IREQUIRE(which() == Declaration::FILE,
              "Must check which() before get()ing a union member.");
  return _reader.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}

inline bool Declaration::Builder::hasFile() {
  KJ_IREQUIRE(which() == Declaration::FILE,
              "Must check which() before get()ing a union member.");
  return _builder.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}
inline  ::capnp::Void Declaration::Reader::getFile() const {
  KJ_IREQUIRE(which() == Declaration::FILE,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Declaration::Builder::getFile() {
  KJ_IREQUIRE(which() == Declaration::FILE,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void Declaration::Builder::setFile( ::capnp::Void value) {
  _builder.setDataField<Declaration::Which>(
      1 * ::capnp::ELEMENTS, Declaration::FILE);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline Declaration::Using::Reader Declaration::Reader::getUsing() const {
  KJ_IREQUIRE(which() == Declaration::USING,
              "Must check which() before get()ing a union member.");
  return Declaration::Using::Reader(_reader);
}
inline Declaration::Using::Builder Declaration::Builder::getUsing() {
  KJ_IREQUIRE(which() == Declaration::USING,
              "Must check which() before get()ing a union member.");
  return Declaration::Using::Builder(_builder);
}
inline Declaration::Using::Builder Declaration::Builder::initUsing() {
  _builder.setDataField<Declaration::Which>(
      1 * ::capnp::ELEMENTS, Declaration::USING);
  _builder.clearPointer(5 * ::capnp::POINTERS);
  return Declaration::Using::Builder(_builder);
}
inline Declaration::Const::Reader Declaration::Reader::getConst() const {
  KJ_IREQUIRE(which() == Declaration::CONST,
              "Must check which() before get()ing a union member.");
  return Declaration::Const::Reader(_reader);
}
inline Declaration::Const::Builder Declaration::Builder::getConst() {
  KJ_IREQUIRE(which() == Declaration::CONST,
              "Must check which() before get()ing a union member.");
  return Declaration::Const::Builder(_builder);
}
inline Declaration::Const::Builder Declaration::Builder::initConst() {
  _builder.setDataField<Declaration::Which>(
      1 * ::capnp::ELEMENTS, Declaration::CONST);
  _builder.clearPointer(5 * ::capnp::POINTERS);
  _builder.clearPointer(6 * ::capnp::POINTERS);
  return Declaration::Const::Builder(_builder);
}
inline bool Declaration::Reader::hasEnum() const {
  KJ_IREQUIRE(which() == Declaration::ENUM,
              "Must check which() before get()ing a union member.");
  return _reader.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}

inline bool Declaration::Builder::hasEnum() {
  KJ_IREQUIRE(which() == Declaration::ENUM,
              "Must check which() before get()ing a union member.");
  return _builder.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}
inline  ::capnp::Void Declaration::Reader::getEnum() const {
  KJ_IREQUIRE(which() == Declaration::ENUM,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Declaration::Builder::getEnum() {
  KJ_IREQUIRE(which() == Declaration::ENUM,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void Declaration::Builder::setEnum( ::capnp::Void value) {
  _builder.setDataField<Declaration::Which>(
      1 * ::capnp::ELEMENTS, Declaration::ENUM);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool Declaration::Reader::hasEnumerant() const {
  KJ_IREQUIRE(which() == Declaration::ENUMERANT,
              "Must check which() before get()ing a union member.");
  return _reader.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}

inline bool Declaration::Builder::hasEnumerant() {
  KJ_IREQUIRE(which() == Declaration::ENUMERANT,
              "Must check which() before get()ing a union member.");
  return _builder.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}
inline  ::capnp::Void Declaration::Reader::getEnumerant() const {
  KJ_IREQUIRE(which() == Declaration::ENUMERANT,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Declaration::Builder::getEnumerant() {
  KJ_IREQUIRE(which() == Declaration::ENUMERANT,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void Declaration::Builder::setEnumerant( ::capnp::Void value) {
  _builder.setDataField<Declaration::Which>(
      1 * ::capnp::ELEMENTS, Declaration::ENUMERANT);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool Declaration::Reader::hasStruct() const {
  KJ_IREQUIRE(which() == Declaration::STRUCT,
              "Must check which() before get()ing a union member.");
  return _reader.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}

inline bool Declaration::Builder::hasStruct() {
  KJ_IREQUIRE(which() == Declaration::STRUCT,
              "Must check which() before get()ing a union member.");
  return _builder.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}
inline  ::capnp::Void Declaration::Reader::getStruct() const {
  KJ_IREQUIRE(which() == Declaration::STRUCT,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Declaration::Builder::getStruct() {
  KJ_IREQUIRE(which() == Declaration::STRUCT,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void Declaration::Builder::setStruct( ::capnp::Void value) {
  _builder.setDataField<Declaration::Which>(
      1 * ::capnp::ELEMENTS, Declaration::STRUCT);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline Declaration::Field::Reader Declaration::Reader::getField() const {
  KJ_IREQUIRE(which() == Declaration::FIELD,
              "Must check which() before get()ing a union member.");
  return Declaration::Field::Reader(_reader);
}
inline Declaration::Field::Builder Declaration::Builder::getField() {
  KJ_IREQUIRE(which() == Declaration::FIELD,
              "Must check which() before get()ing a union member.");
  return Declaration::Field::Builder(_builder);
}
inline Declaration::Field::Builder Declaration::Builder::initField() {
  _builder.setDataField<Declaration::Which>(
      1 * ::capnp::ELEMENTS, Declaration::FIELD);
  _builder.setDataField< ::uint16_t>(6 * ::capnp::ELEMENTS, 0);
  _builder.clearPointer(5 * ::capnp::POINTERS);
  _builder.clearPointer(6 * ::capnp::POINTERS);
  return Declaration::Field::Builder(_builder);
}
inline bool Declaration::Reader::hasUnion() const {
  KJ_IREQUIRE(which() == Declaration::UNION,
              "Must check which() before get()ing a union member.");
  return _reader.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}

inline bool Declaration::Builder::hasUnion() {
  KJ_IREQUIRE(which() == Declaration::UNION,
              "Must check which() before get()ing a union member.");
  return _builder.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}
inline  ::capnp::Void Declaration::Reader::getUnion() const {
  KJ_IREQUIRE(which() == Declaration::UNION,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Declaration::Builder::getUnion() {
  KJ_IREQUIRE(which() == Declaration::UNION,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void Declaration::Builder::setUnion( ::capnp::Void value) {
  _builder.setDataField<Declaration::Which>(
      1 * ::capnp::ELEMENTS, Declaration::UNION);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool Declaration::Reader::hasGroup() const {
  KJ_IREQUIRE(which() == Declaration::GROUP,
              "Must check which() before get()ing a union member.");
  return _reader.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}

inline bool Declaration::Builder::hasGroup() {
  KJ_IREQUIRE(which() == Declaration::GROUP,
              "Must check which() before get()ing a union member.");
  return _builder.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}
inline  ::capnp::Void Declaration::Reader::getGroup() const {
  KJ_IREQUIRE(which() == Declaration::GROUP,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Declaration::Builder::getGroup() {
  KJ_IREQUIRE(which() == Declaration::GROUP,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void Declaration::Builder::setGroup( ::capnp::Void value) {
  _builder.setDataField<Declaration::Which>(
      1 * ::capnp::ELEMENTS, Declaration::GROUP);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool Declaration::Reader::hasInterface() const {
  KJ_IREQUIRE(which() == Declaration::INTERFACE,
              "Must check which() before get()ing a union member.");
  return _reader.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}

inline bool Declaration::Builder::hasInterface() {
  KJ_IREQUIRE(which() == Declaration::INTERFACE,
              "Must check which() before get()ing a union member.");
  return _builder.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}
inline  ::capnp::Void Declaration::Reader::getInterface() const {
  KJ_IREQUIRE(which() == Declaration::INTERFACE,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Declaration::Builder::getInterface() {
  KJ_IREQUIRE(which() == Declaration::INTERFACE,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void Declaration::Builder::setInterface( ::capnp::Void value) {
  _builder.setDataField<Declaration::Which>(
      1 * ::capnp::ELEMENTS, Declaration::INTERFACE);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline Declaration::Method::Reader Declaration::Reader::getMethod() const {
  KJ_IREQUIRE(which() == Declaration::METHOD,
              "Must check which() before get()ing a union member.");
  return Declaration::Method::Reader(_reader);
}
inline Declaration::Method::Builder Declaration::Builder::getMethod() {
  KJ_IREQUIRE(which() == Declaration::METHOD,
              "Must check which() before get()ing a union member.");
  return Declaration::Method::Builder(_builder);
}
inline Declaration::Method::Builder Declaration::Builder::initMethod() {
  _builder.setDataField<Declaration::Which>(
      1 * ::capnp::ELEMENTS, Declaration::METHOD);
  _builder.setDataField< ::uint16_t>(6 * ::capnp::ELEMENTS, 0);
  _builder.clearPointer(5 * ::capnp::POINTERS);
  _builder.clearPointer(6 * ::capnp::POINTERS);
  return Declaration::Method::Builder(_builder);
}
inline Declaration::Annotation::Reader Declaration::Reader::getAnnotation() const {
  KJ_IREQUIRE(which() == Declaration::ANNOTATION,
              "Must check which() before get()ing a union member.");
  return Declaration::Annotation::Reader(_reader);
}
inline Declaration::Annotation::Builder Declaration::Builder::getAnnotation() {
  KJ_IREQUIRE(which() == Declaration::ANNOTATION,
              "Must check which() before get()ing a union member.");
  return Declaration::Annotation::Builder(_builder);
}
inline Declaration::Annotation::Builder Declaration::Builder::initAnnotation() {
  _builder.setDataField<Declaration::Which>(
      1 * ::capnp::ELEMENTS, Declaration::ANNOTATION);
  _builder.setDataField<bool>(96 * ::capnp::ELEMENTS, 0);
  _builder.setDataField<bool>(97 * ::capnp::ELEMENTS, 0);
  _builder.setDataField<bool>(98 * ::capnp::ELEMENTS, 0);
  _builder.setDataField<bool>(99 * ::capnp::ELEMENTS, 0);
  _builder.setDataField<bool>(100 * ::capnp::ELEMENTS, 0);
  _builder.setDataField<bool>(101 * ::capnp::ELEMENTS, 0);
  _builder.setDataField<bool>(102 * ::capnp::ELEMENTS, 0);
  _builder.setDataField<bool>(103 * ::capnp::ELEMENTS, 0);
  _builder.setDataField<bool>(104 * ::capnp::ELEMENTS, 0);
  _builder.setDataField<bool>(105 * ::capnp::ELEMENTS, 0);
  _builder.setDataField<bool>(106 * ::capnp::ELEMENTS, 0);
  _builder.setDataField<bool>(107 * ::capnp::ELEMENTS, 0);
  _builder.clearPointer(5 * ::capnp::POINTERS);
  return Declaration::Annotation::Builder(_builder);
}
inline bool Declaration::Reader::hasNakedId() const {
  KJ_IREQUIRE(which() == Declaration::NAKED_ID,
              "Must check which() before get()ing a union member.");
  return !_reader.isPointerFieldNull(5 * ::capnp::POINTERS);
}
inline bool Declaration::Builder::hasNakedId() {
  KJ_IREQUIRE(which() == Declaration::NAKED_ID,
              "Must check which() before get()ing a union member.");
  return !_builder.isPointerFieldNull(5 * ::capnp::POINTERS);
}
inline  ::capnp::compiler::LocatedInteger::Reader Declaration::Reader::getNakedId() const {
  KJ_IREQUIRE(which() == Declaration::NAKED_ID,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::compiler::LocatedInteger>::get(
      _reader, 5 * ::capnp::POINTERS);
}
inline  ::capnp::compiler::LocatedInteger::Builder Declaration::Builder::getNakedId() {
  KJ_IREQUIRE(which() == Declaration::NAKED_ID,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::compiler::LocatedInteger>::get(
      _builder, 5 * ::capnp::POINTERS);
}
inline void Declaration::Builder::setNakedId( ::capnp::compiler::LocatedInteger::Reader value) {
  _builder.setDataField<Declaration::Which>(
      1 * ::capnp::ELEMENTS, Declaration::NAKED_ID);
  ::capnp::_::PointerHelpers< ::capnp::compiler::LocatedInteger>::set(
      _builder, 5 * ::capnp::POINTERS, value);
}
inline  ::capnp::compiler::LocatedInteger::Builder Declaration::Builder::initNakedId() {
  _builder.setDataField<Declaration::Which>(
      1 * ::capnp::ELEMENTS, Declaration::NAKED_ID);
  return ::capnp::_::PointerHelpers< ::capnp::compiler::LocatedInteger>::init(
      _builder, 5 * ::capnp::POINTERS);
}
inline void Declaration::Builder::adoptNakedId(
    ::capnp::Orphan< ::capnp::compiler::LocatedInteger>&& value) {
  _builder.setDataField<Declaration::Which>(
      1 * ::capnp::ELEMENTS, Declaration::NAKED_ID);
  ::capnp::_::PointerHelpers< ::capnp::compiler::LocatedInteger>::adopt(
      _builder, 5 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::compiler::LocatedInteger> Declaration::Builder::disownNakedId() {
  KJ_IREQUIRE(which() == Declaration::NAKED_ID,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::compiler::LocatedInteger>::disown(
      _builder, 5 * ::capnp::POINTERS);
}

inline bool Declaration::Reader::hasNakedAnnotation() const {
  KJ_IREQUIRE(which() == Declaration::NAKED_ANNOTATION,
              "Must check which() before get()ing a union member.");
  return !_reader.isPointerFieldNull(5 * ::capnp::POINTERS);
}
inline bool Declaration::Builder::hasNakedAnnotation() {
  KJ_IREQUIRE(which() == Declaration::NAKED_ANNOTATION,
              "Must check which() before get()ing a union member.");
  return !_builder.isPointerFieldNull(5 * ::capnp::POINTERS);
}
inline  ::capnp::compiler::Declaration::AnnotationApplication::Reader Declaration::Reader::getNakedAnnotation() const {
  KJ_IREQUIRE(which() == Declaration::NAKED_ANNOTATION,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::compiler::Declaration::AnnotationApplication>::get(
      _reader, 5 * ::capnp::POINTERS);
}
inline  ::capnp::compiler::Declaration::AnnotationApplication::Builder Declaration::Builder::getNakedAnnotation() {
  KJ_IREQUIRE(which() == Declaration::NAKED_ANNOTATION,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::compiler::Declaration::AnnotationApplication>::get(
      _builder, 5 * ::capnp::POINTERS);
}
inline void Declaration::Builder::setNakedAnnotation( ::capnp::compiler::Declaration::AnnotationApplication::Reader value) {
  _builder.setDataField<Declaration::Which>(
      1 * ::capnp::ELEMENTS, Declaration::NAKED_ANNOTATION);
  ::capnp::_::PointerHelpers< ::capnp::compiler::Declaration::AnnotationApplication>::set(
      _builder, 5 * ::capnp::POINTERS, value);
}
inline  ::capnp::compiler::Declaration::AnnotationApplication::Builder Declaration::Builder::initNakedAnnotation() {
  _builder.setDataField<Declaration::Which>(
      1 * ::capnp::ELEMENTS, Declaration::NAKED_ANNOTATION);
  return ::capnp::_::PointerHelpers< ::capnp::compiler::Declaration::AnnotationApplication>::init(
      _builder, 5 * ::capnp::POINTERS);
}
inline void Declaration::Builder::adoptNakedAnnotation(
    ::capnp::Orphan< ::capnp::compiler::Declaration::AnnotationApplication>&& value) {
  _builder.setDataField<Declaration::Which>(
      1 * ::capnp::ELEMENTS, Declaration::NAKED_ANNOTATION);
  ::capnp::_::PointerHelpers< ::capnp::compiler::Declaration::AnnotationApplication>::adopt(
      _builder, 5 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::compiler::Declaration::AnnotationApplication> Declaration::Builder::disownNakedAnnotation() {
  KJ_IREQUIRE(which() == Declaration::NAKED_ANNOTATION,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::compiler::Declaration::AnnotationApplication>::disown(
      _builder, 5 * ::capnp::POINTERS);
}

inline bool Declaration::Reader::hasBuiltinVoid() const {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_VOID,
              "Must check which() before get()ing a union member.");
  return _reader.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}

inline bool Declaration::Builder::hasBuiltinVoid() {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_VOID,
              "Must check which() before get()ing a union member.");
  return _builder.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}
inline  ::capnp::Void Declaration::Reader::getBuiltinVoid() const {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_VOID,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Declaration::Builder::getBuiltinVoid() {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_VOID,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void Declaration::Builder::setBuiltinVoid( ::capnp::Void value) {
  _builder.setDataField<Declaration::Which>(
      1 * ::capnp::ELEMENTS, Declaration::BUILTIN_VOID);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool Declaration::Reader::hasBuiltinBool() const {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_BOOL,
              "Must check which() before get()ing a union member.");
  return _reader.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}

inline bool Declaration::Builder::hasBuiltinBool() {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_BOOL,
              "Must check which() before get()ing a union member.");
  return _builder.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}
inline  ::capnp::Void Declaration::Reader::getBuiltinBool() const {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_BOOL,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Declaration::Builder::getBuiltinBool() {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_BOOL,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void Declaration::Builder::setBuiltinBool( ::capnp::Void value) {
  _builder.setDataField<Declaration::Which>(
      1 * ::capnp::ELEMENTS, Declaration::BUILTIN_BOOL);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool Declaration::Reader::hasBuiltinInt8() const {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_INT8,
              "Must check which() before get()ing a union member.");
  return _reader.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}

inline bool Declaration::Builder::hasBuiltinInt8() {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_INT8,
              "Must check which() before get()ing a union member.");
  return _builder.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}
inline  ::capnp::Void Declaration::Reader::getBuiltinInt8() const {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_INT8,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Declaration::Builder::getBuiltinInt8() {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_INT8,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void Declaration::Builder::setBuiltinInt8( ::capnp::Void value) {
  _builder.setDataField<Declaration::Which>(
      1 * ::capnp::ELEMENTS, Declaration::BUILTIN_INT8);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool Declaration::Reader::hasBuiltinInt16() const {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_INT16,
              "Must check which() before get()ing a union member.");
  return _reader.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}

inline bool Declaration::Builder::hasBuiltinInt16() {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_INT16,
              "Must check which() before get()ing a union member.");
  return _builder.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}
inline  ::capnp::Void Declaration::Reader::getBuiltinInt16() const {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_INT16,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Declaration::Builder::getBuiltinInt16() {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_INT16,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void Declaration::Builder::setBuiltinInt16( ::capnp::Void value) {
  _builder.setDataField<Declaration::Which>(
      1 * ::capnp::ELEMENTS, Declaration::BUILTIN_INT16);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool Declaration::Reader::hasBuiltinInt32() const {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_INT32,
              "Must check which() before get()ing a union member.");
  return _reader.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}

inline bool Declaration::Builder::hasBuiltinInt32() {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_INT32,
              "Must check which() before get()ing a union member.");
  return _builder.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}
inline  ::capnp::Void Declaration::Reader::getBuiltinInt32() const {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_INT32,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Declaration::Builder::getBuiltinInt32() {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_INT32,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void Declaration::Builder::setBuiltinInt32( ::capnp::Void value) {
  _builder.setDataField<Declaration::Which>(
      1 * ::capnp::ELEMENTS, Declaration::BUILTIN_INT32);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool Declaration::Reader::hasBuiltinInt64() const {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_INT64,
              "Must check which() before get()ing a union member.");
  return _reader.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}

inline bool Declaration::Builder::hasBuiltinInt64() {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_INT64,
              "Must check which() before get()ing a union member.");
  return _builder.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}
inline  ::capnp::Void Declaration::Reader::getBuiltinInt64() const {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_INT64,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Declaration::Builder::getBuiltinInt64() {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_INT64,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void Declaration::Builder::setBuiltinInt64( ::capnp::Void value) {
  _builder.setDataField<Declaration::Which>(
      1 * ::capnp::ELEMENTS, Declaration::BUILTIN_INT64);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool Declaration::Reader::hasBuiltinUInt8() const {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_U_INT8,
              "Must check which() before get()ing a union member.");
  return _reader.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}

inline bool Declaration::Builder::hasBuiltinUInt8() {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_U_INT8,
              "Must check which() before get()ing a union member.");
  return _builder.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}
inline  ::capnp::Void Declaration::Reader::getBuiltinUInt8() const {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_U_INT8,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Declaration::Builder::getBuiltinUInt8() {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_U_INT8,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void Declaration::Builder::setBuiltinUInt8( ::capnp::Void value) {
  _builder.setDataField<Declaration::Which>(
      1 * ::capnp::ELEMENTS, Declaration::BUILTIN_U_INT8);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool Declaration::Reader::hasBuiltinUInt16() const {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_U_INT16,
              "Must check which() before get()ing a union member.");
  return _reader.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}

inline bool Declaration::Builder::hasBuiltinUInt16() {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_U_INT16,
              "Must check which() before get()ing a union member.");
  return _builder.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}
inline  ::capnp::Void Declaration::Reader::getBuiltinUInt16() const {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_U_INT16,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Declaration::Builder::getBuiltinUInt16() {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_U_INT16,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void Declaration::Builder::setBuiltinUInt16( ::capnp::Void value) {
  _builder.setDataField<Declaration::Which>(
      1 * ::capnp::ELEMENTS, Declaration::BUILTIN_U_INT16);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool Declaration::Reader::hasBuiltinUInt32() const {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_U_INT32,
              "Must check which() before get()ing a union member.");
  return _reader.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}

inline bool Declaration::Builder::hasBuiltinUInt32() {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_U_INT32,
              "Must check which() before get()ing a union member.");
  return _builder.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}
inline  ::capnp::Void Declaration::Reader::getBuiltinUInt32() const {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_U_INT32,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Declaration::Builder::getBuiltinUInt32() {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_U_INT32,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void Declaration::Builder::setBuiltinUInt32( ::capnp::Void value) {
  _builder.setDataField<Declaration::Which>(
      1 * ::capnp::ELEMENTS, Declaration::BUILTIN_U_INT32);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool Declaration::Reader::hasBuiltinUInt64() const {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_U_INT64,
              "Must check which() before get()ing a union member.");
  return _reader.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}

inline bool Declaration::Builder::hasBuiltinUInt64() {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_U_INT64,
              "Must check which() before get()ing a union member.");
  return _builder.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}
inline  ::capnp::Void Declaration::Reader::getBuiltinUInt64() const {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_U_INT64,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Declaration::Builder::getBuiltinUInt64() {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_U_INT64,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void Declaration::Builder::setBuiltinUInt64( ::capnp::Void value) {
  _builder.setDataField<Declaration::Which>(
      1 * ::capnp::ELEMENTS, Declaration::BUILTIN_U_INT64);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool Declaration::Reader::hasBuiltinFloat32() const {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_FLOAT32,
              "Must check which() before get()ing a union member.");
  return _reader.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}

inline bool Declaration::Builder::hasBuiltinFloat32() {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_FLOAT32,
              "Must check which() before get()ing a union member.");
  return _builder.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}
inline  ::capnp::Void Declaration::Reader::getBuiltinFloat32() const {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_FLOAT32,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Declaration::Builder::getBuiltinFloat32() {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_FLOAT32,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void Declaration::Builder::setBuiltinFloat32( ::capnp::Void value) {
  _builder.setDataField<Declaration::Which>(
      1 * ::capnp::ELEMENTS, Declaration::BUILTIN_FLOAT32);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool Declaration::Reader::hasBuiltinFloat64() const {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_FLOAT64,
              "Must check which() before get()ing a union member.");
  return _reader.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}

inline bool Declaration::Builder::hasBuiltinFloat64() {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_FLOAT64,
              "Must check which() before get()ing a union member.");
  return _builder.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}
inline  ::capnp::Void Declaration::Reader::getBuiltinFloat64() const {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_FLOAT64,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Declaration::Builder::getBuiltinFloat64() {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_FLOAT64,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void Declaration::Builder::setBuiltinFloat64( ::capnp::Void value) {
  _builder.setDataField<Declaration::Which>(
      1 * ::capnp::ELEMENTS, Declaration::BUILTIN_FLOAT64);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool Declaration::Reader::hasBuiltinText() const {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_TEXT,
              "Must check which() before get()ing a union member.");
  return _reader.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}

inline bool Declaration::Builder::hasBuiltinText() {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_TEXT,
              "Must check which() before get()ing a union member.");
  return _builder.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}
inline  ::capnp::Void Declaration::Reader::getBuiltinText() const {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_TEXT,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Declaration::Builder::getBuiltinText() {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_TEXT,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void Declaration::Builder::setBuiltinText( ::capnp::Void value) {
  _builder.setDataField<Declaration::Which>(
      1 * ::capnp::ELEMENTS, Declaration::BUILTIN_TEXT);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool Declaration::Reader::hasBuiltinData() const {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_DATA,
              "Must check which() before get()ing a union member.");
  return _reader.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}

inline bool Declaration::Builder::hasBuiltinData() {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_DATA,
              "Must check which() before get()ing a union member.");
  return _builder.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}
inline  ::capnp::Void Declaration::Reader::getBuiltinData() const {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_DATA,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Declaration::Builder::getBuiltinData() {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_DATA,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void Declaration::Builder::setBuiltinData( ::capnp::Void value) {
  _builder.setDataField<Declaration::Which>(
      1 * ::capnp::ELEMENTS, Declaration::BUILTIN_DATA);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool Declaration::Reader::hasBuiltinList() const {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_LIST,
              "Must check which() before get()ing a union member.");
  return _reader.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}

inline bool Declaration::Builder::hasBuiltinList() {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_LIST,
              "Must check which() before get()ing a union member.");
  return _builder.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}
inline  ::capnp::Void Declaration::Reader::getBuiltinList() const {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_LIST,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Declaration::Builder::getBuiltinList() {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_LIST,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void Declaration::Builder::setBuiltinList( ::capnp::Void value) {
  _builder.setDataField<Declaration::Which>(
      1 * ::capnp::ELEMENTS, Declaration::BUILTIN_LIST);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool Declaration::Reader::hasBuiltinObject() const {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_OBJECT,
              "Must check which() before get()ing a union member.");
  return _reader.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}

inline bool Declaration::Builder::hasBuiltinObject() {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_OBJECT,
              "Must check which() before get()ing a union member.");
  return _builder.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}
inline  ::capnp::Void Declaration::Reader::getBuiltinObject() const {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_OBJECT,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Declaration::Builder::getBuiltinObject() {
  KJ_IREQUIRE(which() == Declaration::BUILTIN_OBJECT,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void Declaration::Builder::setBuiltinObject( ::capnp::Void value) {
  _builder.setDataField<Declaration::Which>(
      1 * ::capnp::ELEMENTS, Declaration::BUILTIN_OBJECT);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool Declaration::AnnotationApplication::Reader::hasName() const {
  return !_reader.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline bool Declaration::AnnotationApplication::Builder::hasName() {
  return !_builder.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline  ::capnp::compiler::DeclName::Reader Declaration::AnnotationApplication::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::compiler::DeclName>::get(
      _reader, 0 * ::capnp::POINTERS);
}
inline  ::capnp::compiler::DeclName::Builder Declaration::AnnotationApplication::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::compiler::DeclName>::get(
      _builder, 0 * ::capnp::POINTERS);
}
inline void Declaration::AnnotationApplication::Builder::setName( ::capnp::compiler::DeclName::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::compiler::DeclName>::set(
      _builder, 0 * ::capnp::POINTERS, value);
}
inline  ::capnp::compiler::DeclName::Builder Declaration::AnnotationApplication::Builder::initName() {
  return ::capnp::_::PointerHelpers< ::capnp::compiler::DeclName>::init(
      _builder, 0 * ::capnp::POINTERS);
}
inline void Declaration::AnnotationApplication::Builder::adoptName(
    ::capnp::Orphan< ::capnp::compiler::DeclName>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::compiler::DeclName>::adopt(
      _builder, 0 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::compiler::DeclName> Declaration::AnnotationApplication::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::compiler::DeclName>::disown(
      _builder, 0 * ::capnp::POINTERS);
}

inline Declaration::AnnotationApplication::Value::Reader Declaration::AnnotationApplication::Reader::getValue() const {
  return Declaration::AnnotationApplication::Value::Reader(_reader);
}
inline Declaration::AnnotationApplication::Value::Builder Declaration::AnnotationApplication::Builder::getValue() {
  return Declaration::AnnotationApplication::Value::Builder(_builder);
}
inline Declaration::AnnotationApplication::Value::Builder Declaration::AnnotationApplication::Builder::initValue() {
  _builder.setDataField< ::uint16_t>(0 * ::capnp::ELEMENTS, 0);
  _builder.clearPointer(1 * ::capnp::POINTERS);
  return Declaration::AnnotationApplication::Value::Builder(_builder);
}
inline Declaration::AnnotationApplication::Value::Which Declaration::AnnotationApplication::Value::Reader::which() const {
  return _reader.getDataField<Which>(0 * ::capnp::ELEMENTS);
}
inline Declaration::AnnotationApplication::Value::Which Declaration::AnnotationApplication::Value::Builder::which() {
  return _builder.getDataField<Which>(0 * ::capnp::ELEMENTS);
}

inline bool Declaration::AnnotationApplication::Value::Reader::hasNone() const {
  KJ_IREQUIRE(which() == Declaration::AnnotationApplication::Value::NONE,
              "Must check which() before get()ing a union member.");
  return _reader.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}

inline bool Declaration::AnnotationApplication::Value::Builder::hasNone() {
  KJ_IREQUIRE(which() == Declaration::AnnotationApplication::Value::NONE,
              "Must check which() before get()ing a union member.");
  return _builder.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}
inline  ::capnp::Void Declaration::AnnotationApplication::Value::Reader::getNone() const {
  KJ_IREQUIRE(which() == Declaration::AnnotationApplication::Value::NONE,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Declaration::AnnotationApplication::Value::Builder::getNone() {
  KJ_IREQUIRE(which() == Declaration::AnnotationApplication::Value::NONE,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void Declaration::AnnotationApplication::Value::Builder::setNone( ::capnp::Void value) {
  _builder.setDataField<Declaration::AnnotationApplication::Value::Which>(
      0 * ::capnp::ELEMENTS, Declaration::AnnotationApplication::Value::NONE);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool Declaration::AnnotationApplication::Value::Reader::hasExpression() const {
  KJ_IREQUIRE(which() == Declaration::AnnotationApplication::Value::EXPRESSION,
              "Must check which() before get()ing a union member.");
  return !_reader.isPointerFieldNull(1 * ::capnp::POINTERS);
}
inline bool Declaration::AnnotationApplication::Value::Builder::hasExpression() {
  KJ_IREQUIRE(which() == Declaration::AnnotationApplication::Value::EXPRESSION,
              "Must check which() before get()ing a union member.");
  return !_builder.isPointerFieldNull(1 * ::capnp::POINTERS);
}
inline  ::capnp::compiler::ValueExpression::Reader Declaration::AnnotationApplication::Value::Reader::getExpression() const {
  KJ_IREQUIRE(which() == Declaration::AnnotationApplication::Value::EXPRESSION,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::compiler::ValueExpression>::get(
      _reader, 1 * ::capnp::POINTERS);
}
inline  ::capnp::compiler::ValueExpression::Builder Declaration::AnnotationApplication::Value::Builder::getExpression() {
  KJ_IREQUIRE(which() == Declaration::AnnotationApplication::Value::EXPRESSION,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::compiler::ValueExpression>::get(
      _builder, 1 * ::capnp::POINTERS);
}
inline void Declaration::AnnotationApplication::Value::Builder::setExpression( ::capnp::compiler::ValueExpression::Reader value) {
  _builder.setDataField<Declaration::AnnotationApplication::Value::Which>(
      0 * ::capnp::ELEMENTS, Declaration::AnnotationApplication::Value::EXPRESSION);
  ::capnp::_::PointerHelpers< ::capnp::compiler::ValueExpression>::set(
      _builder, 1 * ::capnp::POINTERS, value);
}
inline  ::capnp::compiler::ValueExpression::Builder Declaration::AnnotationApplication::Value::Builder::initExpression() {
  _builder.setDataField<Declaration::AnnotationApplication::Value::Which>(
      0 * ::capnp::ELEMENTS, Declaration::AnnotationApplication::Value::EXPRESSION);
  return ::capnp::_::PointerHelpers< ::capnp::compiler::ValueExpression>::init(
      _builder, 1 * ::capnp::POINTERS);
}
inline void Declaration::AnnotationApplication::Value::Builder::adoptExpression(
    ::capnp::Orphan< ::capnp::compiler::ValueExpression>&& value) {
  _builder.setDataField<Declaration::AnnotationApplication::Value::Which>(
      0 * ::capnp::ELEMENTS, Declaration::AnnotationApplication::Value::EXPRESSION);
  ::capnp::_::PointerHelpers< ::capnp::compiler::ValueExpression>::adopt(
      _builder, 1 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::compiler::ValueExpression> Declaration::AnnotationApplication::Value::Builder::disownExpression() {
  KJ_IREQUIRE(which() == Declaration::AnnotationApplication::Value::EXPRESSION,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::compiler::ValueExpression>::disown(
      _builder, 1 * ::capnp::POINTERS);
}

inline bool Declaration::Param::Reader::hasName() const {
  return !_reader.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline bool Declaration::Param::Builder::hasName() {
  return !_builder.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline  ::capnp::compiler::LocatedText::Reader Declaration::Param::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::compiler::LocatedText>::get(
      _reader, 0 * ::capnp::POINTERS);
}
inline  ::capnp::compiler::LocatedText::Builder Declaration::Param::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::compiler::LocatedText>::get(
      _builder, 0 * ::capnp::POINTERS);
}
inline void Declaration::Param::Builder::setName( ::capnp::compiler::LocatedText::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::compiler::LocatedText>::set(
      _builder, 0 * ::capnp::POINTERS, value);
}
inline  ::capnp::compiler::LocatedText::Builder Declaration::Param::Builder::initName() {
  return ::capnp::_::PointerHelpers< ::capnp::compiler::LocatedText>::init(
      _builder, 0 * ::capnp::POINTERS);
}
inline void Declaration::Param::Builder::adoptName(
    ::capnp::Orphan< ::capnp::compiler::LocatedText>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::compiler::LocatedText>::adopt(
      _builder, 0 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::compiler::LocatedText> Declaration::Param::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::compiler::LocatedText>::disown(
      _builder, 0 * ::capnp::POINTERS);
}

inline bool Declaration::Param::Reader::hasType() const {
  return !_reader.isPointerFieldNull(1 * ::capnp::POINTERS);
}
inline bool Declaration::Param::Builder::hasType() {
  return !_builder.isPointerFieldNull(1 * ::capnp::POINTERS);
}
inline  ::capnp::compiler::TypeExpression::Reader Declaration::Param::Reader::getType() const {
  return ::capnp::_::PointerHelpers< ::capnp::compiler::TypeExpression>::get(
      _reader, 1 * ::capnp::POINTERS);
}
inline  ::capnp::compiler::TypeExpression::Builder Declaration::Param::Builder::getType() {
  return ::capnp::_::PointerHelpers< ::capnp::compiler::TypeExpression>::get(
      _builder, 1 * ::capnp::POINTERS);
}
inline void Declaration::Param::Builder::setType( ::capnp::compiler::TypeExpression::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::compiler::TypeExpression>::set(
      _builder, 1 * ::capnp::POINTERS, value);
}
inline  ::capnp::compiler::TypeExpression::Builder Declaration::Param::Builder::initType() {
  return ::capnp::_::PointerHelpers< ::capnp::compiler::TypeExpression>::init(
      _builder, 1 * ::capnp::POINTERS);
}
inline void Declaration::Param::Builder::adoptType(
    ::capnp::Orphan< ::capnp::compiler::TypeExpression>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::compiler::TypeExpression>::adopt(
      _builder, 1 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::compiler::TypeExpression> Declaration::Param::Builder::disownType() {
  return ::capnp::_::PointerHelpers< ::capnp::compiler::TypeExpression>::disown(
      _builder, 1 * ::capnp::POINTERS);
}

inline bool Declaration::Param::Reader::hasAnnotations() const {
  return !_reader.isPointerFieldNull(2 * ::capnp::POINTERS);
}
inline bool Declaration::Param::Builder::hasAnnotations() {
  return !_builder.isPointerFieldNull(2 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::capnp::compiler::Declaration::AnnotationApplication>::Reader Declaration::Param::Reader::getAnnotations() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::compiler::Declaration::AnnotationApplication>>::get(
      _reader, 2 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::capnp::compiler::Declaration::AnnotationApplication>::Builder Declaration::Param::Builder::getAnnotations() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::compiler::Declaration::AnnotationApplication>>::get(
      _builder, 2 * ::capnp::POINTERS);
}
inline void Declaration::Param::Builder::setAnnotations( ::capnp::List< ::capnp::compiler::Declaration::AnnotationApplication>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::compiler::Declaration::AnnotationApplication>>::set(
      _builder, 2 * ::capnp::POINTERS, value);
}
inline  ::capnp::List< ::capnp::compiler::Declaration::AnnotationApplication>::Builder Declaration::Param::Builder::initAnnotations(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::compiler::Declaration::AnnotationApplication>>::init(
      _builder, 2 * ::capnp::POINTERS, size);
}
inline void Declaration::Param::Builder::adoptAnnotations(
    ::capnp::Orphan< ::capnp::List< ::capnp::compiler::Declaration::AnnotationApplication>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::compiler::Declaration::AnnotationApplication>>::adopt(
      _builder, 2 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::compiler::Declaration::AnnotationApplication>> Declaration::Param::Builder::disownAnnotations() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::compiler::Declaration::AnnotationApplication>>::disown(
      _builder, 2 * ::capnp::POINTERS);
}

inline Declaration::Param::DefaultValue::Reader Declaration::Param::Reader::getDefaultValue() const {
  return Declaration::Param::DefaultValue::Reader(_reader);
}
inline Declaration::Param::DefaultValue::Builder Declaration::Param::Builder::getDefaultValue() {
  return Declaration::Param::DefaultValue::Builder(_builder);
}
inline Declaration::Param::DefaultValue::Builder Declaration::Param::Builder::initDefaultValue() {
  _builder.setDataField< ::uint16_t>(0 * ::capnp::ELEMENTS, 0);
  _builder.clearPointer(3 * ::capnp::POINTERS);
  return Declaration::Param::DefaultValue::Builder(_builder);
}
inline Declaration::Param::DefaultValue::Which Declaration::Param::DefaultValue::Reader::which() const {
  return _reader.getDataField<Which>(0 * ::capnp::ELEMENTS);
}
inline Declaration::Param::DefaultValue::Which Declaration::Param::DefaultValue::Builder::which() {
  return _builder.getDataField<Which>(0 * ::capnp::ELEMENTS);
}

inline bool Declaration::Param::DefaultValue::Reader::hasNone() const {
  KJ_IREQUIRE(which() == Declaration::Param::DefaultValue::NONE,
              "Must check which() before get()ing a union member.");
  return _reader.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}

inline bool Declaration::Param::DefaultValue::Builder::hasNone() {
  KJ_IREQUIRE(which() == Declaration::Param::DefaultValue::NONE,
              "Must check which() before get()ing a union member.");
  return _builder.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}
inline  ::capnp::Void Declaration::Param::DefaultValue::Reader::getNone() const {
  KJ_IREQUIRE(which() == Declaration::Param::DefaultValue::NONE,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Declaration::Param::DefaultValue::Builder::getNone() {
  KJ_IREQUIRE(which() == Declaration::Param::DefaultValue::NONE,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void Declaration::Param::DefaultValue::Builder::setNone( ::capnp::Void value) {
  _builder.setDataField<Declaration::Param::DefaultValue::Which>(
      0 * ::capnp::ELEMENTS, Declaration::Param::DefaultValue::NONE);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool Declaration::Param::DefaultValue::Reader::hasValue() const {
  KJ_IREQUIRE(which() == Declaration::Param::DefaultValue::VALUE,
              "Must check which() before get()ing a union member.");
  return !_reader.isPointerFieldNull(3 * ::capnp::POINTERS);
}
inline bool Declaration::Param::DefaultValue::Builder::hasValue() {
  KJ_IREQUIRE(which() == Declaration::Param::DefaultValue::VALUE,
              "Must check which() before get()ing a union member.");
  return !_builder.isPointerFieldNull(3 * ::capnp::POINTERS);
}
inline  ::capnp::compiler::ValueExpression::Reader Declaration::Param::DefaultValue::Reader::getValue() const {
  KJ_IREQUIRE(which() == Declaration::Param::DefaultValue::VALUE,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::compiler::ValueExpression>::get(
      _reader, 3 * ::capnp::POINTERS);
}
inline  ::capnp::compiler::ValueExpression::Builder Declaration::Param::DefaultValue::Builder::getValue() {
  KJ_IREQUIRE(which() == Declaration::Param::DefaultValue::VALUE,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::compiler::ValueExpression>::get(
      _builder, 3 * ::capnp::POINTERS);
}
inline void Declaration::Param::DefaultValue::Builder::setValue( ::capnp::compiler::ValueExpression::Reader value) {
  _builder.setDataField<Declaration::Param::DefaultValue::Which>(
      0 * ::capnp::ELEMENTS, Declaration::Param::DefaultValue::VALUE);
  ::capnp::_::PointerHelpers< ::capnp::compiler::ValueExpression>::set(
      _builder, 3 * ::capnp::POINTERS, value);
}
inline  ::capnp::compiler::ValueExpression::Builder Declaration::Param::DefaultValue::Builder::initValue() {
  _builder.setDataField<Declaration::Param::DefaultValue::Which>(
      0 * ::capnp::ELEMENTS, Declaration::Param::DefaultValue::VALUE);
  return ::capnp::_::PointerHelpers< ::capnp::compiler::ValueExpression>::init(
      _builder, 3 * ::capnp::POINTERS);
}
inline void Declaration::Param::DefaultValue::Builder::adoptValue(
    ::capnp::Orphan< ::capnp::compiler::ValueExpression>&& value) {
  _builder.setDataField<Declaration::Param::DefaultValue::Which>(
      0 * ::capnp::ELEMENTS, Declaration::Param::DefaultValue::VALUE);
  ::capnp::_::PointerHelpers< ::capnp::compiler::ValueExpression>::adopt(
      _builder, 3 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::compiler::ValueExpression> Declaration::Param::DefaultValue::Builder::disownValue() {
  KJ_IREQUIRE(which() == Declaration::Param::DefaultValue::VALUE,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::compiler::ValueExpression>::disown(
      _builder, 3 * ::capnp::POINTERS);
}

inline Declaration::Id::Which Declaration::Id::Reader::which() const {
  return _reader.getDataField<Which>(0 * ::capnp::ELEMENTS);
}
inline Declaration::Id::Which Declaration::Id::Builder::which() {
  return _builder.getDataField<Which>(0 * ::capnp::ELEMENTS);
}

inline bool Declaration::Id::Reader::hasUnspecified() const {
  KJ_IREQUIRE(which() == Declaration::Id::UNSPECIFIED,
              "Must check which() before get()ing a union member.");
  return _reader.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}

inline bool Declaration::Id::Builder::hasUnspecified() {
  KJ_IREQUIRE(which() == Declaration::Id::UNSPECIFIED,
              "Must check which() before get()ing a union member.");
  return _builder.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}
inline  ::capnp::Void Declaration::Id::Reader::getUnspecified() const {
  KJ_IREQUIRE(which() == Declaration::Id::UNSPECIFIED,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Declaration::Id::Builder::getUnspecified() {
  KJ_IREQUIRE(which() == Declaration::Id::UNSPECIFIED,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void Declaration::Id::Builder::setUnspecified( ::capnp::Void value) {
  _builder.setDataField<Declaration::Id::Which>(
      0 * ::capnp::ELEMENTS, Declaration::Id::UNSPECIFIED);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool Declaration::Id::Reader::hasUid() const {
  KJ_IREQUIRE(which() == Declaration::Id::UID,
              "Must check which() before get()ing a union member.");
  return !_reader.isPointerFieldNull(1 * ::capnp::POINTERS);
}
inline bool Declaration::Id::Builder::hasUid() {
  KJ_IREQUIRE(which() == Declaration::Id::UID,
              "Must check which() before get()ing a union member.");
  return !_builder.isPointerFieldNull(1 * ::capnp::POINTERS);
}
inline  ::capnp::compiler::LocatedInteger::Reader Declaration::Id::Reader::getUid() const {
  KJ_IREQUIRE(which() == Declaration::Id::UID,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::compiler::LocatedInteger>::get(
      _reader, 1 * ::capnp::POINTERS);
}
inline  ::capnp::compiler::LocatedInteger::Builder Declaration::Id::Builder::getUid() {
  KJ_IREQUIRE(which() == Declaration::Id::UID,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::compiler::LocatedInteger>::get(
      _builder, 1 * ::capnp::POINTERS);
}
inline void Declaration::Id::Builder::setUid( ::capnp::compiler::LocatedInteger::Reader value) {
  _builder.setDataField<Declaration::Id::Which>(
      0 * ::capnp::ELEMENTS, Declaration::Id::UID);
  ::capnp::_::PointerHelpers< ::capnp::compiler::LocatedInteger>::set(
      _builder, 1 * ::capnp::POINTERS, value);
}
inline  ::capnp::compiler::LocatedInteger::Builder Declaration::Id::Builder::initUid() {
  _builder.setDataField<Declaration::Id::Which>(
      0 * ::capnp::ELEMENTS, Declaration::Id::UID);
  return ::capnp::_::PointerHelpers< ::capnp::compiler::LocatedInteger>::init(
      _builder, 1 * ::capnp::POINTERS);
}
inline void Declaration::Id::Builder::adoptUid(
    ::capnp::Orphan< ::capnp::compiler::LocatedInteger>&& value) {
  _builder.setDataField<Declaration::Id::Which>(
      0 * ::capnp::ELEMENTS, Declaration::Id::UID);
  ::capnp::_::PointerHelpers< ::capnp::compiler::LocatedInteger>::adopt(
      _builder, 1 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::compiler::LocatedInteger> Declaration::Id::Builder::disownUid() {
  KJ_IREQUIRE(which() == Declaration::Id::UID,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::compiler::LocatedInteger>::disown(
      _builder, 1 * ::capnp::POINTERS);
}

inline bool Declaration::Id::Reader::hasOrdinal() const {
  KJ_IREQUIRE(which() == Declaration::Id::ORDINAL,
              "Must check which() before get()ing a union member.");
  return !_reader.isPointerFieldNull(1 * ::capnp::POINTERS);
}
inline bool Declaration::Id::Builder::hasOrdinal() {
  KJ_IREQUIRE(which() == Declaration::Id::ORDINAL,
              "Must check which() before get()ing a union member.");
  return !_builder.isPointerFieldNull(1 * ::capnp::POINTERS);
}
inline  ::capnp::compiler::LocatedInteger::Reader Declaration::Id::Reader::getOrdinal() const {
  KJ_IREQUIRE(which() == Declaration::Id::ORDINAL,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::compiler::LocatedInteger>::get(
      _reader, 1 * ::capnp::POINTERS);
}
inline  ::capnp::compiler::LocatedInteger::Builder Declaration::Id::Builder::getOrdinal() {
  KJ_IREQUIRE(which() == Declaration::Id::ORDINAL,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::compiler::LocatedInteger>::get(
      _builder, 1 * ::capnp::POINTERS);
}
inline void Declaration::Id::Builder::setOrdinal( ::capnp::compiler::LocatedInteger::Reader value) {
  _builder.setDataField<Declaration::Id::Which>(
      0 * ::capnp::ELEMENTS, Declaration::Id::ORDINAL);
  ::capnp::_::PointerHelpers< ::capnp::compiler::LocatedInteger>::set(
      _builder, 1 * ::capnp::POINTERS, value);
}
inline  ::capnp::compiler::LocatedInteger::Builder Declaration::Id::Builder::initOrdinal() {
  _builder.setDataField<Declaration::Id::Which>(
      0 * ::capnp::ELEMENTS, Declaration::Id::ORDINAL);
  return ::capnp::_::PointerHelpers< ::capnp::compiler::LocatedInteger>::init(
      _builder, 1 * ::capnp::POINTERS);
}
inline void Declaration::Id::Builder::adoptOrdinal(
    ::capnp::Orphan< ::capnp::compiler::LocatedInteger>&& value) {
  _builder.setDataField<Declaration::Id::Which>(
      0 * ::capnp::ELEMENTS, Declaration::Id::ORDINAL);
  ::capnp::_::PointerHelpers< ::capnp::compiler::LocatedInteger>::adopt(
      _builder, 1 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::compiler::LocatedInteger> Declaration::Id::Builder::disownOrdinal() {
  KJ_IREQUIRE(which() == Declaration::Id::ORDINAL,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::compiler::LocatedInteger>::disown(
      _builder, 1 * ::capnp::POINTERS);
}

inline bool Declaration::Using::Reader::hasTarget() const {
  return !_reader.isPointerFieldNull(5 * ::capnp::POINTERS);
}
inline bool Declaration::Using::Builder::hasTarget() {
  return !_builder.isPointerFieldNull(5 * ::capnp::POINTERS);
}
inline  ::capnp::compiler::DeclName::Reader Declaration::Using::Reader::getTarget() const {
  return ::capnp::_::PointerHelpers< ::capnp::compiler::DeclName>::get(
      _reader, 5 * ::capnp::POINTERS);
}
inline  ::capnp::compiler::DeclName::Builder Declaration::Using::Builder::getTarget() {
  return ::capnp::_::PointerHelpers< ::capnp::compiler::DeclName>::get(
      _builder, 5 * ::capnp::POINTERS);
}
inline void Declaration::Using::Builder::setTarget( ::capnp::compiler::DeclName::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::compiler::DeclName>::set(
      _builder, 5 * ::capnp::POINTERS, value);
}
inline  ::capnp::compiler::DeclName::Builder Declaration::Using::Builder::initTarget() {
  return ::capnp::_::PointerHelpers< ::capnp::compiler::DeclName>::init(
      _builder, 5 * ::capnp::POINTERS);
}
inline void Declaration::Using::Builder::adoptTarget(
    ::capnp::Orphan< ::capnp::compiler::DeclName>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::compiler::DeclName>::adopt(
      _builder, 5 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::compiler::DeclName> Declaration::Using::Builder::disownTarget() {
  return ::capnp::_::PointerHelpers< ::capnp::compiler::DeclName>::disown(
      _builder, 5 * ::capnp::POINTERS);
}

inline bool Declaration::Const::Reader::hasType() const {
  return !_reader.isPointerFieldNull(5 * ::capnp::POINTERS);
}
inline bool Declaration::Const::Builder::hasType() {
  return !_builder.isPointerFieldNull(5 * ::capnp::POINTERS);
}
inline  ::capnp::compiler::TypeExpression::Reader Declaration::Const::Reader::getType() const {
  return ::capnp::_::PointerHelpers< ::capnp::compiler::TypeExpression>::get(
      _reader, 5 * ::capnp::POINTERS);
}
inline  ::capnp::compiler::TypeExpression::Builder Declaration::Const::Builder::getType() {
  return ::capnp::_::PointerHelpers< ::capnp::compiler::TypeExpression>::get(
      _builder, 5 * ::capnp::POINTERS);
}
inline void Declaration::Const::Builder::setType( ::capnp::compiler::TypeExpression::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::compiler::TypeExpression>::set(
      _builder, 5 * ::capnp::POINTERS, value);
}
inline  ::capnp::compiler::TypeExpression::Builder Declaration::Const::Builder::initType() {
  return ::capnp::_::PointerHelpers< ::capnp::compiler::TypeExpression>::init(
      _builder, 5 * ::capnp::POINTERS);
}
inline void Declaration::Const::Builder::adoptType(
    ::capnp::Orphan< ::capnp::compiler::TypeExpression>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::compiler::TypeExpression>::adopt(
      _builder, 5 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::compiler::TypeExpression> Declaration::Const::Builder::disownType() {
  return ::capnp::_::PointerHelpers< ::capnp::compiler::TypeExpression>::disown(
      _builder, 5 * ::capnp::POINTERS);
}

inline bool Declaration::Const::Reader::hasValue() const {
  return !_reader.isPointerFieldNull(6 * ::capnp::POINTERS);
}
inline bool Declaration::Const::Builder::hasValue() {
  return !_builder.isPointerFieldNull(6 * ::capnp::POINTERS);
}
inline  ::capnp::compiler::ValueExpression::Reader Declaration::Const::Reader::getValue() const {
  return ::capnp::_::PointerHelpers< ::capnp::compiler::ValueExpression>::get(
      _reader, 6 * ::capnp::POINTERS);
}
inline  ::capnp::compiler::ValueExpression::Builder Declaration::Const::Builder::getValue() {
  return ::capnp::_::PointerHelpers< ::capnp::compiler::ValueExpression>::get(
      _builder, 6 * ::capnp::POINTERS);
}
inline void Declaration::Const::Builder::setValue( ::capnp::compiler::ValueExpression::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::compiler::ValueExpression>::set(
      _builder, 6 * ::capnp::POINTERS, value);
}
inline  ::capnp::compiler::ValueExpression::Builder Declaration::Const::Builder::initValue() {
  return ::capnp::_::PointerHelpers< ::capnp::compiler::ValueExpression>::init(
      _builder, 6 * ::capnp::POINTERS);
}
inline void Declaration::Const::Builder::adoptValue(
    ::capnp::Orphan< ::capnp::compiler::ValueExpression>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::compiler::ValueExpression>::adopt(
      _builder, 6 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::compiler::ValueExpression> Declaration::Const::Builder::disownValue() {
  return ::capnp::_::PointerHelpers< ::capnp::compiler::ValueExpression>::disown(
      _builder, 6 * ::capnp::POINTERS);
}

inline bool Declaration::Field::Reader::hasType() const {
  return !_reader.isPointerFieldNull(5 * ::capnp::POINTERS);
}
inline bool Declaration::Field::Builder::hasType() {
  return !_builder.isPointerFieldNull(5 * ::capnp::POINTERS);
}
inline  ::capnp::compiler::TypeExpression::Reader Declaration::Field::Reader::getType() const {
  return ::capnp::_::PointerHelpers< ::capnp::compiler::TypeExpression>::get(
      _reader, 5 * ::capnp::POINTERS);
}
inline  ::capnp::compiler::TypeExpression::Builder Declaration::Field::Builder::getType() {
  return ::capnp::_::PointerHelpers< ::capnp::compiler::TypeExpression>::get(
      _builder, 5 * ::capnp::POINTERS);
}
inline void Declaration::Field::Builder::setType( ::capnp::compiler::TypeExpression::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::compiler::TypeExpression>::set(
      _builder, 5 * ::capnp::POINTERS, value);
}
inline  ::capnp::compiler::TypeExpression::Builder Declaration::Field::Builder::initType() {
  return ::capnp::_::PointerHelpers< ::capnp::compiler::TypeExpression>::init(
      _builder, 5 * ::capnp::POINTERS);
}
inline void Declaration::Field::Builder::adoptType(
    ::capnp::Orphan< ::capnp::compiler::TypeExpression>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::compiler::TypeExpression>::adopt(
      _builder, 5 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::compiler::TypeExpression> Declaration::Field::Builder::disownType() {
  return ::capnp::_::PointerHelpers< ::capnp::compiler::TypeExpression>::disown(
      _builder, 5 * ::capnp::POINTERS);
}

inline Declaration::Field::DefaultValue::Reader Declaration::Field::Reader::getDefaultValue() const {
  return Declaration::Field::DefaultValue::Reader(_reader);
}
inline Declaration::Field::DefaultValue::Builder Declaration::Field::Builder::getDefaultValue() {
  return Declaration::Field::DefaultValue::Builder(_builder);
}
inline Declaration::Field::DefaultValue::Builder Declaration::Field::Builder::initDefaultValue() {
  _builder.setDataField< ::uint16_t>(6 * ::capnp::ELEMENTS, 0);
  _builder.clearPointer(6 * ::capnp::POINTERS);
  return Declaration::Field::DefaultValue::Builder(_builder);
}
inline Declaration::Field::DefaultValue::Which Declaration::Field::DefaultValue::Reader::which() const {
  return _reader.getDataField<Which>(6 * ::capnp::ELEMENTS);
}
inline Declaration::Field::DefaultValue::Which Declaration::Field::DefaultValue::Builder::which() {
  return _builder.getDataField<Which>(6 * ::capnp::ELEMENTS);
}

inline bool Declaration::Field::DefaultValue::Reader::hasNone() const {
  KJ_IREQUIRE(which() == Declaration::Field::DefaultValue::NONE,
              "Must check which() before get()ing a union member.");
  return _reader.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}

inline bool Declaration::Field::DefaultValue::Builder::hasNone() {
  KJ_IREQUIRE(which() == Declaration::Field::DefaultValue::NONE,
              "Must check which() before get()ing a union member.");
  return _builder.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}
inline  ::capnp::Void Declaration::Field::DefaultValue::Reader::getNone() const {
  KJ_IREQUIRE(which() == Declaration::Field::DefaultValue::NONE,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Declaration::Field::DefaultValue::Builder::getNone() {
  KJ_IREQUIRE(which() == Declaration::Field::DefaultValue::NONE,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void Declaration::Field::DefaultValue::Builder::setNone( ::capnp::Void value) {
  _builder.setDataField<Declaration::Field::DefaultValue::Which>(
      6 * ::capnp::ELEMENTS, Declaration::Field::DefaultValue::NONE);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool Declaration::Field::DefaultValue::Reader::hasValue() const {
  KJ_IREQUIRE(which() == Declaration::Field::DefaultValue::VALUE,
              "Must check which() before get()ing a union member.");
  return !_reader.isPointerFieldNull(6 * ::capnp::POINTERS);
}
inline bool Declaration::Field::DefaultValue::Builder::hasValue() {
  KJ_IREQUIRE(which() == Declaration::Field::DefaultValue::VALUE,
              "Must check which() before get()ing a union member.");
  return !_builder.isPointerFieldNull(6 * ::capnp::POINTERS);
}
inline  ::capnp::compiler::ValueExpression::Reader Declaration::Field::DefaultValue::Reader::getValue() const {
  KJ_IREQUIRE(which() == Declaration::Field::DefaultValue::VALUE,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::compiler::ValueExpression>::get(
      _reader, 6 * ::capnp::POINTERS);
}
inline  ::capnp::compiler::ValueExpression::Builder Declaration::Field::DefaultValue::Builder::getValue() {
  KJ_IREQUIRE(which() == Declaration::Field::DefaultValue::VALUE,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::compiler::ValueExpression>::get(
      _builder, 6 * ::capnp::POINTERS);
}
inline void Declaration::Field::DefaultValue::Builder::setValue( ::capnp::compiler::ValueExpression::Reader value) {
  _builder.setDataField<Declaration::Field::DefaultValue::Which>(
      6 * ::capnp::ELEMENTS, Declaration::Field::DefaultValue::VALUE);
  ::capnp::_::PointerHelpers< ::capnp::compiler::ValueExpression>::set(
      _builder, 6 * ::capnp::POINTERS, value);
}
inline  ::capnp::compiler::ValueExpression::Builder Declaration::Field::DefaultValue::Builder::initValue() {
  _builder.setDataField<Declaration::Field::DefaultValue::Which>(
      6 * ::capnp::ELEMENTS, Declaration::Field::DefaultValue::VALUE);
  return ::capnp::_::PointerHelpers< ::capnp::compiler::ValueExpression>::init(
      _builder, 6 * ::capnp::POINTERS);
}
inline void Declaration::Field::DefaultValue::Builder::adoptValue(
    ::capnp::Orphan< ::capnp::compiler::ValueExpression>&& value) {
  _builder.setDataField<Declaration::Field::DefaultValue::Which>(
      6 * ::capnp::ELEMENTS, Declaration::Field::DefaultValue::VALUE);
  ::capnp::_::PointerHelpers< ::capnp::compiler::ValueExpression>::adopt(
      _builder, 6 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::compiler::ValueExpression> Declaration::Field::DefaultValue::Builder::disownValue() {
  KJ_IREQUIRE(which() == Declaration::Field::DefaultValue::VALUE,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::compiler::ValueExpression>::disown(
      _builder, 6 * ::capnp::POINTERS);
}

inline bool Declaration::Method::Reader::hasParams() const {
  return !_reader.isPointerFieldNull(5 * ::capnp::POINTERS);
}
inline bool Declaration::Method::Builder::hasParams() {
  return !_builder.isPointerFieldNull(5 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::capnp::compiler::Declaration::Param>::Reader Declaration::Method::Reader::getParams() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::compiler::Declaration::Param>>::get(
      _reader, 5 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::capnp::compiler::Declaration::Param>::Builder Declaration::Method::Builder::getParams() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::compiler::Declaration::Param>>::get(
      _builder, 5 * ::capnp::POINTERS);
}
inline void Declaration::Method::Builder::setParams( ::capnp::List< ::capnp::compiler::Declaration::Param>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::compiler::Declaration::Param>>::set(
      _builder, 5 * ::capnp::POINTERS, value);
}
inline  ::capnp::List< ::capnp::compiler::Declaration::Param>::Builder Declaration::Method::Builder::initParams(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::compiler::Declaration::Param>>::init(
      _builder, 5 * ::capnp::POINTERS, size);
}
inline void Declaration::Method::Builder::adoptParams(
    ::capnp::Orphan< ::capnp::List< ::capnp::compiler::Declaration::Param>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::compiler::Declaration::Param>>::adopt(
      _builder, 5 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::compiler::Declaration::Param>> Declaration::Method::Builder::disownParams() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::compiler::Declaration::Param>>::disown(
      _builder, 5 * ::capnp::POINTERS);
}

inline Declaration::Method::ReturnType::Reader Declaration::Method::Reader::getReturnType() const {
  return Declaration::Method::ReturnType::Reader(_reader);
}
inline Declaration::Method::ReturnType::Builder Declaration::Method::Builder::getReturnType() {
  return Declaration::Method::ReturnType::Builder(_builder);
}
inline Declaration::Method::ReturnType::Builder Declaration::Method::Builder::initReturnType() {
  _builder.setDataField< ::uint16_t>(6 * ::capnp::ELEMENTS, 0);
  _builder.clearPointer(6 * ::capnp::POINTERS);
  return Declaration::Method::ReturnType::Builder(_builder);
}
inline Declaration::Method::ReturnType::Which Declaration::Method::ReturnType::Reader::which() const {
  return _reader.getDataField<Which>(6 * ::capnp::ELEMENTS);
}
inline Declaration::Method::ReturnType::Which Declaration::Method::ReturnType::Builder::which() {
  return _builder.getDataField<Which>(6 * ::capnp::ELEMENTS);
}

inline bool Declaration::Method::ReturnType::Reader::hasNone() const {
  KJ_IREQUIRE(which() == Declaration::Method::ReturnType::NONE,
              "Must check which() before get()ing a union member.");
  return _reader.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}

inline bool Declaration::Method::ReturnType::Builder::hasNone() {
  KJ_IREQUIRE(which() == Declaration::Method::ReturnType::NONE,
              "Must check which() before get()ing a union member.");
  return _builder.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}
inline  ::capnp::Void Declaration::Method::ReturnType::Reader::getNone() const {
  KJ_IREQUIRE(which() == Declaration::Method::ReturnType::NONE,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Declaration::Method::ReturnType::Builder::getNone() {
  KJ_IREQUIRE(which() == Declaration::Method::ReturnType::NONE,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void Declaration::Method::ReturnType::Builder::setNone( ::capnp::Void value) {
  _builder.setDataField<Declaration::Method::ReturnType::Which>(
      6 * ::capnp::ELEMENTS, Declaration::Method::ReturnType::NONE);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool Declaration::Method::ReturnType::Reader::hasExpression() const {
  KJ_IREQUIRE(which() == Declaration::Method::ReturnType::EXPRESSION,
              "Must check which() before get()ing a union member.");
  return !_reader.isPointerFieldNull(6 * ::capnp::POINTERS);
}
inline bool Declaration::Method::ReturnType::Builder::hasExpression() {
  KJ_IREQUIRE(which() == Declaration::Method::ReturnType::EXPRESSION,
              "Must check which() before get()ing a union member.");
  return !_builder.isPointerFieldNull(6 * ::capnp::POINTERS);
}
inline  ::capnp::compiler::TypeExpression::Reader Declaration::Method::ReturnType::Reader::getExpression() const {
  KJ_IREQUIRE(which() == Declaration::Method::ReturnType::EXPRESSION,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::compiler::TypeExpression>::get(
      _reader, 6 * ::capnp::POINTERS);
}
inline  ::capnp::compiler::TypeExpression::Builder Declaration::Method::ReturnType::Builder::getExpression() {
  KJ_IREQUIRE(which() == Declaration::Method::ReturnType::EXPRESSION,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::compiler::TypeExpression>::get(
      _builder, 6 * ::capnp::POINTERS);
}
inline void Declaration::Method::ReturnType::Builder::setExpression( ::capnp::compiler::TypeExpression::Reader value) {
  _builder.setDataField<Declaration::Method::ReturnType::Which>(
      6 * ::capnp::ELEMENTS, Declaration::Method::ReturnType::EXPRESSION);
  ::capnp::_::PointerHelpers< ::capnp::compiler::TypeExpression>::set(
      _builder, 6 * ::capnp::POINTERS, value);
}
inline  ::capnp::compiler::TypeExpression::Builder Declaration::Method::ReturnType::Builder::initExpression() {
  _builder.setDataField<Declaration::Method::ReturnType::Which>(
      6 * ::capnp::ELEMENTS, Declaration::Method::ReturnType::EXPRESSION);
  return ::capnp::_::PointerHelpers< ::capnp::compiler::TypeExpression>::init(
      _builder, 6 * ::capnp::POINTERS);
}
inline void Declaration::Method::ReturnType::Builder::adoptExpression(
    ::capnp::Orphan< ::capnp::compiler::TypeExpression>&& value) {
  _builder.setDataField<Declaration::Method::ReturnType::Which>(
      6 * ::capnp::ELEMENTS, Declaration::Method::ReturnType::EXPRESSION);
  ::capnp::_::PointerHelpers< ::capnp::compiler::TypeExpression>::adopt(
      _builder, 6 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::compiler::TypeExpression> Declaration::Method::ReturnType::Builder::disownExpression() {
  KJ_IREQUIRE(which() == Declaration::Method::ReturnType::EXPRESSION,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::compiler::TypeExpression>::disown(
      _builder, 6 * ::capnp::POINTERS);
}

inline bool Declaration::Annotation::Reader::hasType() const {
  return !_reader.isPointerFieldNull(5 * ::capnp::POINTERS);
}
inline bool Declaration::Annotation::Builder::hasType() {
  return !_builder.isPointerFieldNull(5 * ::capnp::POINTERS);
}
inline  ::capnp::compiler::TypeExpression::Reader Declaration::Annotation::Reader::getType() const {
  return ::capnp::_::PointerHelpers< ::capnp::compiler::TypeExpression>::get(
      _reader, 5 * ::capnp::POINTERS);
}
inline  ::capnp::compiler::TypeExpression::Builder Declaration::Annotation::Builder::getType() {
  return ::capnp::_::PointerHelpers< ::capnp::compiler::TypeExpression>::get(
      _builder, 5 * ::capnp::POINTERS);
}
inline void Declaration::Annotation::Builder::setType( ::capnp::compiler::TypeExpression::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::compiler::TypeExpression>::set(
      _builder, 5 * ::capnp::POINTERS, value);
}
inline  ::capnp::compiler::TypeExpression::Builder Declaration::Annotation::Builder::initType() {
  return ::capnp::_::PointerHelpers< ::capnp::compiler::TypeExpression>::init(
      _builder, 5 * ::capnp::POINTERS);
}
inline void Declaration::Annotation::Builder::adoptType(
    ::capnp::Orphan< ::capnp::compiler::TypeExpression>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::compiler::TypeExpression>::adopt(
      _builder, 5 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::compiler::TypeExpression> Declaration::Annotation::Builder::disownType() {
  return ::capnp::_::PointerHelpers< ::capnp::compiler::TypeExpression>::disown(
      _builder, 5 * ::capnp::POINTERS);
}

inline bool Declaration::Annotation::Reader::hasTargetsFile() const {
  return _reader.hasDataField<bool>(96 * ::capnp::ELEMENTS);
}

inline bool Declaration::Annotation::Builder::hasTargetsFile() {
  return _builder.hasDataField<bool>(96 * ::capnp::ELEMENTS);
}
inline bool Declaration::Annotation::Reader::getTargetsFile() const {
  return _reader.getDataField<bool>(
      96 * ::capnp::ELEMENTS);
}

inline bool Declaration::Annotation::Builder::getTargetsFile() {
  return _builder.getDataField<bool>(
      96 * ::capnp::ELEMENTS);
}
inline void Declaration::Annotation::Builder::setTargetsFile(bool value) {
  _builder.setDataField<bool>(
      96 * ::capnp::ELEMENTS, value);
}

inline bool Declaration::Annotation::Reader::hasTargetsConst() const {
  return _reader.hasDataField<bool>(97 * ::capnp::ELEMENTS);
}

inline bool Declaration::Annotation::Builder::hasTargetsConst() {
  return _builder.hasDataField<bool>(97 * ::capnp::ELEMENTS);
}
inline bool Declaration::Annotation::Reader::getTargetsConst() const {
  return _reader.getDataField<bool>(
      97 * ::capnp::ELEMENTS);
}

inline bool Declaration::Annotation::Builder::getTargetsConst() {
  return _builder.getDataField<bool>(
      97 * ::capnp::ELEMENTS);
}
inline void Declaration::Annotation::Builder::setTargetsConst(bool value) {
  _builder.setDataField<bool>(
      97 * ::capnp::ELEMENTS, value);
}

inline bool Declaration::Annotation::Reader::hasTargetsEnum() const {
  return _reader.hasDataField<bool>(98 * ::capnp::ELEMENTS);
}

inline bool Declaration::Annotation::Builder::hasTargetsEnum() {
  return _builder.hasDataField<bool>(98 * ::capnp::ELEMENTS);
}
inline bool Declaration::Annotation::Reader::getTargetsEnum() const {
  return _reader.getDataField<bool>(
      98 * ::capnp::ELEMENTS);
}

inline bool Declaration::Annotation::Builder::getTargetsEnum() {
  return _builder.getDataField<bool>(
      98 * ::capnp::ELEMENTS);
}
inline void Declaration::Annotation::Builder::setTargetsEnum(bool value) {
  _builder.setDataField<bool>(
      98 * ::capnp::ELEMENTS, value);
}

inline bool Declaration::Annotation::Reader::hasTargetsEnumerant() const {
  return _reader.hasDataField<bool>(99 * ::capnp::ELEMENTS);
}

inline bool Declaration::Annotation::Builder::hasTargetsEnumerant() {
  return _builder.hasDataField<bool>(99 * ::capnp::ELEMENTS);
}
inline bool Declaration::Annotation::Reader::getTargetsEnumerant() const {
  return _reader.getDataField<bool>(
      99 * ::capnp::ELEMENTS);
}

inline bool Declaration::Annotation::Builder::getTargetsEnumerant() {
  return _builder.getDataField<bool>(
      99 * ::capnp::ELEMENTS);
}
inline void Declaration::Annotation::Builder::setTargetsEnumerant(bool value) {
  _builder.setDataField<bool>(
      99 * ::capnp::ELEMENTS, value);
}

inline bool Declaration::Annotation::Reader::hasTargetsStruct() const {
  return _reader.hasDataField<bool>(100 * ::capnp::ELEMENTS);
}

inline bool Declaration::Annotation::Builder::hasTargetsStruct() {
  return _builder.hasDataField<bool>(100 * ::capnp::ELEMENTS);
}
inline bool Declaration::Annotation::Reader::getTargetsStruct() const {
  return _reader.getDataField<bool>(
      100 * ::capnp::ELEMENTS);
}

inline bool Declaration::Annotation::Builder::getTargetsStruct() {
  return _builder.getDataField<bool>(
      100 * ::capnp::ELEMENTS);
}
inline void Declaration::Annotation::Builder::setTargetsStruct(bool value) {
  _builder.setDataField<bool>(
      100 * ::capnp::ELEMENTS, value);
}

inline bool Declaration::Annotation::Reader::hasTargetsField() const {
  return _reader.hasDataField<bool>(101 * ::capnp::ELEMENTS);
}

inline bool Declaration::Annotation::Builder::hasTargetsField() {
  return _builder.hasDataField<bool>(101 * ::capnp::ELEMENTS);
}
inline bool Declaration::Annotation::Reader::getTargetsField() const {
  return _reader.getDataField<bool>(
      101 * ::capnp::ELEMENTS);
}

inline bool Declaration::Annotation::Builder::getTargetsField() {
  return _builder.getDataField<bool>(
      101 * ::capnp::ELEMENTS);
}
inline void Declaration::Annotation::Builder::setTargetsField(bool value) {
  _builder.setDataField<bool>(
      101 * ::capnp::ELEMENTS, value);
}

inline bool Declaration::Annotation::Reader::hasTargetsUnion() const {
  return _reader.hasDataField<bool>(102 * ::capnp::ELEMENTS);
}

inline bool Declaration::Annotation::Builder::hasTargetsUnion() {
  return _builder.hasDataField<bool>(102 * ::capnp::ELEMENTS);
}
inline bool Declaration::Annotation::Reader::getTargetsUnion() const {
  return _reader.getDataField<bool>(
      102 * ::capnp::ELEMENTS);
}

inline bool Declaration::Annotation::Builder::getTargetsUnion() {
  return _builder.getDataField<bool>(
      102 * ::capnp::ELEMENTS);
}
inline void Declaration::Annotation::Builder::setTargetsUnion(bool value) {
  _builder.setDataField<bool>(
      102 * ::capnp::ELEMENTS, value);
}

inline bool Declaration::Annotation::Reader::hasTargetsGroup() const {
  return _reader.hasDataField<bool>(103 * ::capnp::ELEMENTS);
}

inline bool Declaration::Annotation::Builder::hasTargetsGroup() {
  return _builder.hasDataField<bool>(103 * ::capnp::ELEMENTS);
}
inline bool Declaration::Annotation::Reader::getTargetsGroup() const {
  return _reader.getDataField<bool>(
      103 * ::capnp::ELEMENTS);
}

inline bool Declaration::Annotation::Builder::getTargetsGroup() {
  return _builder.getDataField<bool>(
      103 * ::capnp::ELEMENTS);
}
inline void Declaration::Annotation::Builder::setTargetsGroup(bool value) {
  _builder.setDataField<bool>(
      103 * ::capnp::ELEMENTS, value);
}

inline bool Declaration::Annotation::Reader::hasTargetsInterface() const {
  return _reader.hasDataField<bool>(104 * ::capnp::ELEMENTS);
}

inline bool Declaration::Annotation::Builder::hasTargetsInterface() {
  return _builder.hasDataField<bool>(104 * ::capnp::ELEMENTS);
}
inline bool Declaration::Annotation::Reader::getTargetsInterface() const {
  return _reader.getDataField<bool>(
      104 * ::capnp::ELEMENTS);
}

inline bool Declaration::Annotation::Builder::getTargetsInterface() {
  return _builder.getDataField<bool>(
      104 * ::capnp::ELEMENTS);
}
inline void Declaration::Annotation::Builder::setTargetsInterface(bool value) {
  _builder.setDataField<bool>(
      104 * ::capnp::ELEMENTS, value);
}

inline bool Declaration::Annotation::Reader::hasTargetsMethod() const {
  return _reader.hasDataField<bool>(105 * ::capnp::ELEMENTS);
}

inline bool Declaration::Annotation::Builder::hasTargetsMethod() {
  return _builder.hasDataField<bool>(105 * ::capnp::ELEMENTS);
}
inline bool Declaration::Annotation::Reader::getTargetsMethod() const {
  return _reader.getDataField<bool>(
      105 * ::capnp::ELEMENTS);
}

inline bool Declaration::Annotation::Builder::getTargetsMethod() {
  return _builder.getDataField<bool>(
      105 * ::capnp::ELEMENTS);
}
inline void Declaration::Annotation::Builder::setTargetsMethod(bool value) {
  _builder.setDataField<bool>(
      105 * ::capnp::ELEMENTS, value);
}

inline bool Declaration::Annotation::Reader::hasTargetsParam() const {
  return _reader.hasDataField<bool>(106 * ::capnp::ELEMENTS);
}

inline bool Declaration::Annotation::Builder::hasTargetsParam() {
  return _builder.hasDataField<bool>(106 * ::capnp::ELEMENTS);
}
inline bool Declaration::Annotation::Reader::getTargetsParam() const {
  return _reader.getDataField<bool>(
      106 * ::capnp::ELEMENTS);
}

inline bool Declaration::Annotation::Builder::getTargetsParam() {
  return _builder.getDataField<bool>(
      106 * ::capnp::ELEMENTS);
}
inline void Declaration::Annotation::Builder::setTargetsParam(bool value) {
  _builder.setDataField<bool>(
      106 * ::capnp::ELEMENTS, value);
}

inline bool Declaration::Annotation::Reader::hasTargetsAnnotation() const {
  return _reader.hasDataField<bool>(107 * ::capnp::ELEMENTS);
}

inline bool Declaration::Annotation::Builder::hasTargetsAnnotation() {
  return _builder.hasDataField<bool>(107 * ::capnp::ELEMENTS);
}
inline bool Declaration::Annotation::Reader::getTargetsAnnotation() const {
  return _reader.getDataField<bool>(
      107 * ::capnp::ELEMENTS);
}

inline bool Declaration::Annotation::Builder::getTargetsAnnotation() {
  return _builder.getDataField<bool>(
      107 * ::capnp::ELEMENTS);
}
inline void Declaration::Annotation::Builder::setTargetsAnnotation(bool value) {
  _builder.setDataField<bool>(
      107 * ::capnp::ELEMENTS, value);
}

inline bool ParsedFile::Reader::hasRoot() const {
  return !_reader.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline bool ParsedFile::Builder::hasRoot() {
  return !_builder.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline  ::capnp::compiler::Declaration::Reader ParsedFile::Reader::getRoot() const {
  return ::capnp::_::PointerHelpers< ::capnp::compiler::Declaration>::get(
      _reader, 0 * ::capnp::POINTERS);
}
inline  ::capnp::compiler::Declaration::Builder ParsedFile::Builder::getRoot() {
  return ::capnp::_::PointerHelpers< ::capnp::compiler::Declaration>::get(
      _builder, 0 * ::capnp::POINTERS);
}
inline void ParsedFile::Builder::setRoot( ::capnp::compiler::Declaration::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::compiler::Declaration>::set(
      _builder, 0 * ::capnp::POINTERS, value);
}
inline  ::capnp::compiler::Declaration::Builder ParsedFile::Builder::initRoot() {
  return ::capnp::_::PointerHelpers< ::capnp::compiler::Declaration>::init(
      _builder, 0 * ::capnp::POINTERS);
}
inline void ParsedFile::Builder::adoptRoot(
    ::capnp::Orphan< ::capnp::compiler::Declaration>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::compiler::Declaration>::adopt(
      _builder, 0 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::compiler::Declaration> ParsedFile::Builder::disownRoot() {
  return ::capnp::_::PointerHelpers< ::capnp::compiler::Declaration>::disown(
      _builder, 0 * ::capnp::POINTERS);
}

}  // namespace
}  // namespace

#endif  // CAPNP_INCLUDED_c56be168dcbbc3c6_
